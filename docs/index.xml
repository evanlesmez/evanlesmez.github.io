<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Evan Lesmez</title>
<link>https://evanlesmez.com/</link>
<atom:link href="https://evanlesmez.com/index.xml" rel="self" type="application/rss+xml"/>
<description>Evan Lesmez&#39;s blog</description>
<generator>quarto-1.5.56</generator>
<lastBuildDate>Mon, 26 Aug 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>Devlog day 21: doodling a character idea and completing the Godot loot series</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/22-devlog-day21/</link>
  <description><![CDATA[ 





<p><img src="https://evanlesmez.com/posts/22-devlog-day21/pistachio-doodle.jpg" style="width:50%"></p>
<p>As you can see I am not a particularly gifted artist but for the game jam I need to make an idea for a character.<br>
To avoid needing details I covered most of the face with “mask” so all I would need is some basic eyes.<br>
Drew inspiration from Hollow Knight, pikmin, and EVA from Walle all as inspiration for simple but pleasant character designs to emulate.<br>
I threw pics of all those plus more on Krita to use as reference images.<br>
Now I need to digitize this image and create some variations for sprite animations.<br>
Plus the stage and background but I’ll get there hopefully.</p>
<section id="godot-loot-done" class="level2">
<h2 class="anchored" data-anchor-id="godot-loot-done">Godot loot done</h2>
<p>I comleted the full module today.<br>
The last bits were wrapping the ship around the edge of the screen when it hit.<br>
Use <code>wrapf</code> for that with the the viewport size <code>get_viewport_rect</code>.</p>
<p>Last bit was to make the items appear to float even though their collision shapes did not actually follow the floatiness.<br>
There is a class called <code>Tween</code> that is dedicated to tweaking properities of nodes to add some animation effects in place.<br>
<code>create_tween</code><br>
<code>tween.set_trans(&lt;TWEEN_TRANS_ENUM&gt;)</code> (choose which type of interpolation to give smoothness)<br>
<code>tween.tween_property(sprite_2d, "position" or prop, new_value, duration)</code><br>
<code>tween.set_loops()</code> loop the tween animation forever or set a value</p>
<p>Thanks for reading!<br>
<img src="https://media.tenor.com/zn6_qXYxgI4AAAAC/mugen-samurai-champloo.gif" width="33%"></p>


</section>

 ]]></description>
  <category>gamedev</category>
  <category>gamejam</category>
  <category>drawing</category>
  <guid>https://evanlesmez.com/posts/22-devlog-day21/</guid>
  <pubDate>Mon, 26 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog day 20: first game jam begins</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/21-devlog-day20/</link>
  <description><![CDATA[ 





<p>I am traveling right now so did not have much time to progress on lessons.<br>
I checked the theme for the DC game jam when it came out <a href="https://itch.io/jam/district-jam-5" class="uri">https://itch.io/jam/district-jam-5</a>.<br>
Did some brainstorming with friends and on my own.<br>
Also figured out how to launch nvim as script editor from with Godot on creating/edit scripts.<br>
Lastly came up with a plan:</p>
<ol type="1">
<li>Figure out git in Godot editor</li>
<li>Pureref vision board of characers like calcifer and charmander …</li>
<li>Inkscape make some rough drawings on inkscape of the main character</li>
<li>Hand draw some ideas for the background abd stage</li>
<li>Get Erica involved with some sound and music ideas based on the setting</li>
<li>Sprite movement</li>
<li>Practice export game build</li>
<li>Animate</li>
<li>hidden</li>
<li>hidden</li>
<li>UI if time</li>
</ol>



 ]]></description>
  <category>gamedev</category>
  <category>gamejam</category>
  <guid>https://evanlesmez.com/posts/21-devlog-day20/</guid>
  <pubDate>Fri, 23 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 19: kickstart.nvim and a lil Godot</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/20-devlog-day19/</link>
  <description><![CDATA[ 





<section id="kickstart.nvim" class="level2">
<h2 class="anchored" data-anchor-id="kickstart.nvim">kickstart.nvim</h2>
<p>I was watching a thePrimegean video with TJ Devries and was curious who he was and what he had worked on.<br>
I pulled up his youtube channel and discovered he works on Neovim… a lot.<br>
Since I have been practicing Vim recently with the goal of adopting it fully for programming, I watched some of his videos.<br>
He had one on getting up and running with Neovim from 5 months ago which showed how to quickly get started using <a href="https://github.com/nvim-lua/kickstart.nvim">kickstart.nvim</a>.</p>
<p>kickstart is just a boilerplate configuration meant to be extended and changed later.<br>
Since neovim scripting is written in <code>lua</code>, I hopped over to <a href="https://learnxinyminutes.com/" class="uri">https://learnxinyminutes.com/</a> to quickly get a hang of the syntax and features.<br>
Here were my main notes:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode lua code-with-copy"><code class="sourceCode lua"><span id="cb1-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">multiLineStr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">[[example</span></span>
<span id="cb1-2"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">multi</span></span>
<span id="cb1-3"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">line</span></span>
<span id="cb1-4"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">string]]</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">deleteThisVarInMem</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">nil</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">n</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb1-9">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">num</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">num</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- lacks ++ and +=</span></span>
<span id="cb1-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">n</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yo'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elseif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">s</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wut'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--as in not equals like !=</span></span>
<span id="cb1-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb1-16">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">blah</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">io.read</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- local scoped from stdin</span></span>
<span id="cb1-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">karlSum</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">i</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- The range includes both ends.</span></span>
<span id="cb1-21">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">karlSum</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">karlSum</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">i</span></span>
<span id="cb1-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Another loop construct:</span></span>
<span id="cb1-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeat</span></span>
<span id="cb1-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'the way of the future'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-27">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">num</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">num</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-28"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">until</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">num</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-29"></span>
<span id="cb1-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> fib<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">n</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-31">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">n</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> fib<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">n</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fib<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">n</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-34"></span>
<span id="cb1-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Calls with one string param don't need parens:</span></span>
<span id="cb1-36"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hello'</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Works fine.</span></span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Dict literals have string keys by default:</span></span>
<span id="cb1-39"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">t</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">key1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value1'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">key2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-40"></span>
<span id="cb1-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- String keys can use js-like dot notation:</span></span>
<span id="cb1-42"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">key1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Prints 'value1'.</span></span>
<span id="cb1-43"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">newKey</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Adds a new key/value pair.</span></span>
<span id="cb1-44"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">key2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">nil</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Removes key2 from the table.</span></span>
<span id="cb1-45"></span>
<span id="cb1-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Literal notation for any (non-nil) value as key:</span></span>
<span id="cb1-47"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">u</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'@!#'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'qbert'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[{}]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1729</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tau'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-48"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">u</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- prints "tau"</span></span>
<span id="cb1-49"></span>
<span id="cb1-50"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">key</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">val</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pairs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">u</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Table iteration.</span></span>
<span id="cb1-51">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">key</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">val</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-52"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-53"></span>
<span id="cb1-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- _G is a special table of all globals.</span></span>
<span id="cb1-55"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">_G</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_G'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">_G</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Prints 'true'.</span></span>
<span id="cb1-56"></span>
<span id="cb1-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- There are only tables, no classes or lists</span></span>
<span id="cb1-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- {1,2,3} is like a list. Indexes also follow that pattern</span></span>
<span id="cb1-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Here is a "class"</span></span>
<span id="cb1-60"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Dog</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span>                                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 1.</span></span>
<span id="cb1-61"></span>
<span id="cb1-62"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Dog</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>new<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span>                         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 2.</span></span>
<span id="cb1-63">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">newObj</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sound</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'woof'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 3.</span></span>
<span id="cb1-64">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__index</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>                      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 4.</span></span>
<span id="cb1-65">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setmetatable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">newObj</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 5.</span></span>
<span id="cb1-66"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-67"></span>
<span id="cb1-68"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Dog</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>makeSound<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span>                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 6.</span></span>
<span id="cb1-69">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'I say '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sound</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-70"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-71"></span>
<span id="cb1-72"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mrDog</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Dog</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>new<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span>                          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 7.</span></span>
<span id="cb1-73"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mrDog</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>makeSound<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 'I say woof'         -- 8.</span></span>
<span id="cb1-74"></span>
<span id="cb1-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Suppose the file mod.lua looks like this:</span></span>
<span id="cb1-76"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">local</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">M</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb1-77"></span>
<span id="cb1-78"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">local</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> sayMyName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb1-79">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hrunkner'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-80"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-81"></span>
<span id="cb1-82"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">M</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>sayHello<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb1-83">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Why hello there'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-84">  sayMyName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb1-85"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-86"></span>
<span id="cb1-87"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">M</span></span>
<span id="cb1-88"></span>
<span id="cb1-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Another file can use mod.lua's functionality:</span></span>
<span id="cb1-90"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mod'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Run the file mod.lua.</span></span>
<span id="cb1-91"></span>
<span id="cb1-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- require is the standard way to include modules.</span></span>
<span id="cb1-93"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- require acts like:     (if not cached; see below)</span></span>
<span id="cb1-94"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb1-95">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">contents</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">of</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lua</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-96"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)()</span></span>
<span id="cb1-97"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- It's like mod.lua is a function body, so that</span></span>
<span id="cb1-98"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- locals inside mod.lua are invisible outside it.</span></span>
<span id="cb1-99"></span>
<span id="cb1-100"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- This works because mod here = M in mod.lua:</span></span>
<span id="cb1-101"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>sayHello<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Prints: Why hello there Hrunkner</span></span>
<span id="cb1-102"></span>
<span id="cb1-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- This is wrong; sayMyName only exists in mod.lua:</span></span>
<span id="cb1-104"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>sayMyName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- error</span></span>
<span id="cb1-105"></span>
<span id="cb1-106"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- require's return values are cached so a file is</span></span>
<span id="cb1-107"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- run at most once, even when require'd many times.</span></span></code></pre></div>
<p>After learning some Lua, I forked and cloned the kickstart repo, ran nvim and to install all the <code>Lazy</code> plugins.<br>
I am currently writing this post with <code>nvim</code> with the latest default kickstart + a transparency in the theme so I can see my background.</p>
<p><img src="https://evanlesmez.com/posts/20-devlog-day19/nvim-meta.png" style="width:100%"></p>
</section>
<section id="godot" class="level2">
<h2 class="anchored" data-anchor-id="godot">Godot</h2>
<p>Learned about layers and masks for collision objects.<br>
Layers and masks are numbered and selectable in the <code>CollisionObject2D</code> node properties.<br>
The selected layer numbers group objects into sections they can be detected on.<br>
The mask numbers determine which layers can be detected by the object.<br>
For example: Layers 1 and 2 are selected for an object with mask 3.<br>
Other objects can detect this object if they have mask 1 or 2.<br>
Other objects with layer 3 are detected by the example object.</p>
<p>This is useful when you want some items to have collision interactions but not with others which happens literally all the time in every game ever.</p>
<p>Thanks for reading!</p>
<p><img src="https://i.pinimg.com/originals/72/d3/8a/72d38aa9d01e0ea482afb6fbf07b8df3.gif" style="width:50%"></p>


</section>

 ]]></description>
  <category>gamedev</category>
  <category>godot</category>
  <category>nvim</category>
  <guid>https://evanlesmez.com/posts/20-devlog-day19/</guid>
  <pubDate>Wed, 21 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 18: Encrypted root FS and Godot random item positions</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/19-devlog-day18/</link>
  <description><![CDATA[ 





<section id="root-filesystem-encryption" class="level2">
<h2 class="anchored" data-anchor-id="root-filesystem-encryption">Root filesystem encryption</h2>
<p>Earlier today I was thinking about encrypting an external SSD to store some files.<br>
I started doing some research and one big question popped up in my head.<br>
If someone stole my computer, and live-booted the SSD with a USB, what could they take?<br>
Doing some more digging, I realized they could change my root password and find my current user password in plain-text.<br>
They could then boot up the PC, login, not only see all my files, but they would also gain access to my email, and access to online accounts that I am currently logged into.<br>
That seems pretty terrible.</p>
<p>Now most people don’t suck and would not steal your computer.<br>
And out of the people who do suck, most are not that tech savy.<br>
However, in the small chance where someone really wants to screw you over and steal a lot of your shit, it is better to be prepared.</p>
<p>So I spent 3 hours learning and encrypting my root filesystem.<br>
I just went for it with 0 backups of all the configuration I had done to get archlinux setup with i3, feh, picom, alacritty…<br>
Kinda silly but I figured it would be good practice to have to do it again from scratch if I messed up.</p>
<p>Most of the documentation I followed was <a href="https://wiki.archlinux.org/title/Dm-crypt/Encrypting_an_entire_system">on dm_crypt</a> in the “Encrypting and unencryped file system”.<br>
I had to:<br>
1. resize the file system to make room for the 32MB LUKS header<br>
2. <code>crypsetup reencrypt</code> to encrypt the filesystem which took about an hour<br>
3. <code>cryptsetup open</code> the file system partition to a <code>/dev/mapper/{mapped-name}</code> to decrypt it (using a key or passphrase)<br>
4. <code>resize2fs</code> to fill up the extra space I dropped for the LUKS header<br>
5. remount the decrypted filesystem and boot<br>
6. arch-chroot into the mounted filesystem<br>
7. use <code>blkid</code> to find the ids of the decrypted and encrypted devices<br>
8. update the <code>mkinitcpio.conf</code> to include <code>encrypt</code> in the initramfs so early userspace has the tools ready to decrypt the file system partition<br>
9. add kernel params to the GRUB bootloader config that specify the UUID of the device that is encrypted and what to map it to.<br>
10. regenerate GRUB mkconfig on mounted <code>/boot</code><br>
11. update fstab for the new UUID of the decrypted FS</p>
<p>It was a lot.<br>
I double checked the configs for UUIDs, dname and everything and rebooted and it all worked!</p>
<p>If you are reading this, encrypting your drive is probably way easier and can be done with a GUI.<br>
Also, you should probably encrypt your drive.</p>
</section>
<section id="godot-random-item-positions" class="level2">
<h2 class="anchored" data-anchor-id="godot-random-item-positions">Godot random item positions</h2>
<p><img src="https://evanlesmez.com/posts/19-devlog-day18/ship-loots-position-rand-items.gif" style="width:100%"></p>
<p>The coins and health packs now spawn at random points.<br>
The process is to first store the <code>preload</code> item scenes in an array.<br>
<code>array.pick_random</code> to choose one at random.<br>
<code>add_child(rand_item)</code> to add the scene to the scene tree dynamically.<br>
<code>get_viewport_rect</code> will get use the size and position of viewport.<br>
We want the <code>size</code> Vector2D.<br>
Then some more randomness.<br>
<code>item_inst.position.x = randf_range(0, viewport.size.x)</code> and same for y.</p>
<p>And there you go, a random item will be spawned at a random point in the viewport.</p>
<p>Thanks for reading!</p>
<p><img src="https://media.giphy.com/media/8hXlcywWOFiJW/giphy.gif" style="width:50%"></p>


</section>

 ]]></description>
  <category>gamedev</category>
  <category>godot</category>
  <category>encryption</category>
  <guid>https://evanlesmez.com/posts/19-devlog-day18/</guid>
  <pubDate>Tue, 20 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 17: Godot random items</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/18-devlog-day17/</link>
  <description><![CDATA[ 





<section id="godot-looting" class="level2">
<h2 class="anchored" data-anchor-id="godot-looting">Godot looting</h2>
<p>Got a little further today.<br>
Repeated setting up the Area2D pattern for handling the on_area_entered signal.<br>
The next step in the project was to randomly generate loot.<br>
This required a base Node2D with a child Timer node.<br>
The timer node was needed to emit <code>timeout</code> signals at regular intervals to trigger item spawns.<br>
<code>get_node("Timer").timeout.connect(_on_timer_timeout)</code></p>
<p>Then to handle the timeout:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb1-1">func _on_timer_timeout() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> void:</span>
<span id="cb1-2">    var random_item_scene: PackedScene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item_scenes.pick_random()</span>
<span id="cb1-3">    var item_instance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> random_item_scene.instantiate()</span>
<span id="cb1-4">    add_child(item_instance)</span></code></pre></div>
<p>It looks a little goofy since I still haven’t removed the hardcoded behavior of <code>queue_free</code> on area entered for items.</p>
<p><img src="https://evanlesmez.com/posts/18-devlog-day17/loot-random.gif" alt="Alternating gem and health pack spawning and destroying each other" style="width:50%"></p>
<p>Random aside, <code>faillock</code> is handy for when you mess up your sudo password a few times in a row and got locked out.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">faillock</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--user</span> {user-who-inted-away-password-attemps} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list your failed attemps</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">faillock</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--user</span> {user-who-trolled} <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--reset</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># resets your lock so you can try again</span></span></code></pre></div>
<p>Thanks for reading!</p>
<p><img src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2F78.media.tumblr.com%2Fbecf220160e6cd331557507ae12f411d%2Ftumblr_mga36uGNoJ1s2r6dwo1_500.gif" style="width:50%"></p>


</section>

 ]]></description>
  <category>gamedev</category>
  <category>godot</category>
  <guid>https://evanlesmez.com/posts/18-devlog-day17/</guid>
  <pubDate>Sun, 18 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 16: Vim windows, IGDA meetups, and Godot looting</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/17-devlog-day16/</link>
  <description><![CDATA[ 





<section id="igda-dc" class="level2">
<h2 class="anchored" data-anchor-id="igda-dc">IGDA DC</h2>
<p>First off, I forgot to mention in the last few posts that I attended an indie game dev meetup.<br>
On last tuesday I met up with ~10 indie game dev/designers as organized by the DC chapter of the International Game Developer’s Association or <a href="https://www.igdadc.org/">IGDA DC</a><br>
It was motivating to see the games people were working on and hear what types of games people liked and wanted to create.</p>
<p>There was a working session today that I also attended to put a few hours into gamedev and share our progress updates together.<br>
There were 7 of us there and I was definetly the newest to gamedev.<br>
The mini PC workstation was definetly a conversation starter.</p>
</section>
<section id="vim" class="level2">
<h2 class="anchored" data-anchor-id="vim">Vim</h2>
<p>Before I went to the IGDA meetup, I got back on the Vim train.<br>
Learned about a few commands.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:find</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># like shell find but in Vim environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:set</span> path+={path}/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">**</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># changes the path that :find will search through for matches</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># netrw commands </span></span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:E</span> or :e. <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># explore the Vim file tree of the cwd</span></span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:Se</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split explore the file tree</span></span>
<span id="cb1-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:Ve</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vertical split explore file treek</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:source</span> .vimrc <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># different from :! souce .vimrc which will have errors becuase .vimrc is not a compatible shell syntax</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span>!mkdir <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> %:h <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create folders and file needed to match buffer path</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:w</span> !sudo tee % <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> /dev/null <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shorcut to sudo write higher permission files</span></span></code></pre></div>
</section>
<section id="godot-looting" class="level2">
<h2 class="anchored" data-anchor-id="godot-looting">Godot looting</h2>
<p>In Godot I added some gem looting mechanics.<br>
Learned how to use node groups to handle <code>area_entered</code> signals seperately for different nodes like gems vs.&nbsp;health packs.<br>
Also learned how to update the UI for a label via the <code>text</code> property.<br>
For progress bar it was <code>value</code>.<br>
So a common pattern for colliding objects seems to be:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Area2D</span></span>
<span id="cb2-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> area_entered signal</span>
<span id="cb2-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CollisionShape2D</span></span>
<span id="cb2-4">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> shape</span>
<span id="cb2-5">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Sprite2D</span></span>
<span id="cb2-6">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> texture</span>
<span id="cb2-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Control</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">UI</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Element</span> Node </span>
<span id="cb2-9">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> value or text</span></code></pre></div>
<p>In the <code>_ready</code> method of the parent node, usually Area2D, the <code>area_entered</code> signal is connected to a callback.<br>
The arg passed to the callback, or the <code>area_that_entered</code> can have a configured group to check <code>is_in_group('group_name')</code>.<br>
If the area that entered should cause an update, the corresponding attribute like health or gems should update, and consequentally trigger an update the attribute in the UI that displays that value.</p>
<p><img src="https://evanlesmez.com/posts/17-devlog-day16/ship-gem-loots.gif" width="100%"></p>
<p>Thanks for reading!</p>
<p><img src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2F78.media.tumblr.com%2Fbecf220160e6cd331557507ae12f411d%2Ftumblr_mga36uGNoJ1s2r6dwo1_500.gif" width="50%"></p>


</section>

 ]]></description>
  <category>vim</category>
  <category>gamedev</category>
  <category>godot</category>
  <guid>https://evanlesmez.com/posts/17-devlog-day16/</guid>
  <pubDate>Sat, 17 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 15: mini PC workstation endeavors with i3</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/16-devlog-day15/</link>
  <description><![CDATA[ 





<p>I have always wanted to tinker around with the i3 tiling window manager.<br>
Recently I started using Pop_OS! tiling feature, and installed <code>komorebi</code> on my Windows gaming machine to replicate.<br>
In doing so, I realized tiling feels way nicer than the default stacking behavior common to most display managers.</p>
<p>So I took the plunge in setting up i3 and love it!</p>
<p><img src="https://evanlesmez.com/posts/16-devlog-day15/arch-i3-ser5.png" style="width:100%"></p>
<p>The keybindings are nice and configurable.<br>
I changed my mod key to be the Win key.<br>
<code>Win+&lt;CR&gt;</code> creates a new terminal.<br>
<code>Win+[h,j,k,l]</code> goes to the window on the screen in that direction (vim motions).<br>
<code>Win+d</code> opens dmenu to choose a program. Critical.<br>
<code>Win+{N}</code> goes to workspace N. Incredibly handy.<br>
<code>Win+Shift+{N}</code> moves window to workspace N. Also incredibly handy starting out.<br>
<code>Win+Shift+q</code> close window.<br>
There are so many more but even with these it feels so comfortable.</p>
<p>Note to get a nice background I used <code>feh</code> and to add opacity I used <code>picom</code> as a compositor.</p>



 ]]></description>
  <category>electronics</category>
  <category>linux</category>
  <guid>https://evanlesmez.com/posts/16-devlog-day15/</guid>
  <pubDate>Fri, 16 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 14: the new mini PC battery worked!</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/15-devlog-day14/</link>
  <description><![CDATA[ 





<p>It worked!<br>
I put the new battery in place, put it into the 20V (19V compatible) DC output mode, and then with a barrel adapter, connected the the DC out of the battery to the mini PC.<br>
I then went through the process of installing a Linux OS and setting up some programs which ended up taking a few hours.</p>
<p><img src="https://evanlesmez.com/posts/15-devlog-day14/mini-pc-workstation-v1.jpg" style="width:100%" alt="mini PC workstation version 1.0.0"></p>



 ]]></description>
  <category>electronics</category>
  <category>mini pc</category>
  <guid>https://evanlesmez.com/posts/15-devlog-day14/</guid>
  <pubDate>Thu, 15 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 13</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/14-devlog-day13/</link>
  <description><![CDATA[ 





<section id="how-it-started" class="level2">
<h2 class="anchored" data-anchor-id="how-it-started">How it started</h2>
<p>Maybe a year or two ago, I jotted an idea down for a portable workstation down in my digital notebook (Obsidian with Syncthing for the curious).<br>
Isn’t that just a laptop you may wonder?<br>
Pretty much except with all of the parts more modular, and I am not talking like Framework laptops.<br>
I mean, take a mini PC, a portable monitor (with VESA compatibilty), a lightweight VESA mount, a keyboard, a mouse, and optionally although not really, a battery.<br>
Why though?</p>
<ol type="1">
<li>Laptop monitors being tethered to keyboards and touchpads is not great for your shoulders and neck<br>
</li>
<li>Each part is swappable. There are many options for each component that goes into it<br>
</li>
<li>Mini PCs are cheaper than many laptops for equal specs<br>
</li>
<li>Fun project</li>
</ol>
<p>I had all the parts sorted, from the <a href="https://www.bee-link.com/products/beelink-ser5-max-5800h">Beelink SER5 mini PC</a> to the <a href="https://hhkeyboard.us/hhkb/pro-classic">HHKB Pro classic mech keyboard</a> to the <a href="https://www.kensington.com/p/products/electronic-control-solutions/trackball-products/slimblade-pro-trackball/">Kensington Trackball mouse</a> along with some shitty cheap LCD monitor.<br>
I picked out one cheap 1 monitor VESA mount to try which worked great.<br>
I got a second one that could hold two monitors that needed some effort to mod to fit in my backpack.<br>
Unfortunately I stripped a few of the bolts so that part is on hold, but the one monitor stand works fine.</p>
<p>I then neeed to pick out a battery.<br>
I saw some interesting multi-device battery pack that advertized 250 W, 230 Wh with an AC outlet and a few USB-C ports.<br>
Seemed a little overkill but would do the job.</p>
</section>
<section id="failure" class="level2">
<h2 class="anchored" data-anchor-id="failure">Failure</h2>
<p>I put all the pieces together, testing the battery powering all the devices.<br>
After preparing my USB with a Linux distro (Arch btw), I started going through the installation procedure.<br>
A few minutes in, the mini PC powered down randomly.<br>
I noticed the USB-C powering the monitor was significantly chewed up by one of the cats so I replaced it and tried again.<br>
I got a lot further this time but about 20 minutes in, the PC crashed again.<br>
I was out of time for some plans with friends but I could not help wondering what was going wrong.</p>
<p>When I got back home I checked the specs of the battery pack on the device.<br>
For the AC outlet, which the mini PC power adapter was plugged into, the specs read “120V ~0.83 A” meaning 110 Volts and 0.83 Amps.<br>
I compared that to the specs on the power adapter which read “AC input, 100-240V 1.5A”.<br>
So I was pretty sure something was off there.</p>
<p>I have not dealt with electriconics physics in a while so I had to some web searching.<br>
Turns out, as I relearned, power (Watts) is <code>volts * amps</code>.<br>
Watts is the unit measurement of power for electrical devices.<br>
Then Watt hours, or Wh, is the power used (or provided by a battery) in an hour.</p>
<p>Back to the battery, with our equation <code>power = volts * amps</code>, <code>110 V * .83 A</code> is 100 Watts.<br>
That is a lot less than the advertized 250 W I saw before.<br>
I went back to the web page and noticed that lower down there was a bullet that read <code>charges a laptop 3 times, 100 W max fast charging</code>.<br>
100 W max fast charging?<br>
I realized they must have meant each port was only capable of 100 W max and that 250 Watts was the total power capacity of the battery.<br>
The vendor definetly could make the description more clear.<br>
I setup a return for that battery pack and started looking for a new one.</p>
</section>
<section id="quest-for-the-battery" class="level2">
<h2 class="anchored" data-anchor-id="quest-for-the-battery">Quest for the battery</h2>
<p>I did some math this time around.<br>
On the specs of the mini PC, I saw that it takes 19V DC at 3.7A.<br>
That is 65 Watts max.<br>
The monitor takes 5V 2A or 10 Watts which can be lowered further by dropping the frame rate, resolution, and brightness.<br>
The other peripherals like mouse and keyboard would add maybe another 5 watts max.</p>
<p>At highest power consumption, 65 + 10 + 5 = <strong>80</strong> watts for the workstation.<br>
Realistically if I was only programming with limited web browsing on a lightweight distro like Arch with XFCE, this would probably be closer to 50W.<br>
I estimated that at a coffee shop I would want at least 2 hours of battery power before needing to find an outlet to be reasonable.<br>
Therefore, I needed 50W * 2h = 100 Wh battery with 19V and &gt;3.7A DC output and &gt;80 Watts max.</p>
<p>Found a couple that met those specs and included barrel connector adapters to plug into the mini PC DC in.<br>
The one I chose ended up specifying mAh (miliAmp hours) rather than Watts so I had to convert.<br>
Lithium Ion batteries have an internal voltage of 3.7V.<br>
Wh = 3.7 * I mAh / 1000.<br>
The battery advertized 50000 mAh so 3.7 * 50000 / 1000 = 185 wH.<br>
Worst case that gives me 2 hours of charge, average case more like 3.5 hours.<br>
Not too shaby.<br>
Bonus was that it only 2 lbs compared to the other one which was 5+ lbs and much larger.</p>
<p>Unforseen con of all of this is that none of these batteries are allowed on planes.</p>
</section>
<section id="thing-i-relearned" class="level2">
<h2 class="anchored" data-anchor-id="thing-i-relearned">Thing I (re)learned</h2>
<ul>
<li><code>Power (Watts) = Volts (V) * Current (Amps)</code><br>
</li>
<li>Wh = Watt hours = Watts * hours<br>
</li>
<li>You need to make sure that batteries are capable of delivering enough watts for all the devices they are powering (sounds obvious but not relevant in most daily life as a programmer)<br>
</li>
<li>Laptop batteries are crazy efficient for their size and safety compatibility<br>
</li>
<li>Lithium Ion batteries operate at 3.7V<br>
</li>
<li>Batteries need to be low Wh and watts to get on planes<br>
</li>
<li>Buying a mini PC with a USB-C cable or 12V DC in would have been smarter for battery options<br>
</li>
<li>When things go wrong, do some research</li>
</ul>
<p>This ended up taking me 3 hours today so no update on gamedev or Vim.</p>
<p>Thanks for reading!</p>
<p><img src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.pinimg.com%2Foriginals%2Ffd%2Ff7%2F46%2Ffdf746569de435d87da6c1e70c3585fc.gif" width="50%"></p>


</section>

 ]]></description>
  <category>electronics</category>
  <category>mini pc</category>
  <guid>https://evanlesmez.com/posts/14-devlog-day13/</guid>
  <pubDate>Wed, 14 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 12</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/13-devlog-day12/</link>
  <description><![CDATA[ 





<section id="vim" class="level2">
<h2 class="anchored" data-anchor-id="vim">Vim</h2>
<section id="tabs" class="level3">
<h3 class="anchored" data-anchor-id="tabs">Tabs</h3>
<p><code>:h tabpage</code></p>
<p>Tabs in Vim are similar to tabs in other programs however the key difference is that one tab in Vim does not map to one file.<br>
Instead, a tab in vim can have several buffers within it as well a window panes that show those buffers.</p>
<p><img src="https://evanlesmez.com/posts/13-devlog-day12/vim-tabs-demo.gif" style="width:100%"></p>
<p>Here are the commands:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:lcd</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the working dir for the current window</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:tabe</span> {filename} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># like edit but open buffer in new tab</span></span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>C-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>T <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># break the window pane into a new tab</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:tabc</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># close current tab</span></span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:tabo</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># close other tabs</span></span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:tabn</span> or gt <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># next tab</span></span>
<span id="cb1-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:tabp</span> or gT <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prev tab</span></span>
<span id="cb1-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:tabmove</span> {N} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># move the Nth tab to beginning</span></span></code></pre></div>
</section>
<section id="files" class="level3">
<h3 class="anchored" data-anchor-id="files">Files</h3>
<p>I also learned about how to open files to buffers quicker rather than typing out full paths.<br>
I already had discovered the <code>%</code> in command mode which represents the current buffer’s filepath.<br>
Combine it into <code>: %:h</code> and press <tab> and the full path to the current buffer is completed for you.<br>
This is handy for when you opened Vim at the root project dir but are opening files nested a few folders down.<br>
If you already have one open, instead of typing out path from root, you can type the path out relative to the current folder.</tab></p>
</section>
</section>
<section id="godot" class="level2">
<h2 class="anchored" data-anchor-id="godot">Godot</h2>
<p>Added a healthbar UI element to the spaceship health pickup scene.<br>
Use a <code>Control</code> node with <code>ProgressBar</code> node nested.<br>
Go into the control section of the inspector tab to change colors via theme overrides (or theme if one is made).<br>
Note though that since these nodes are nested under a parent node that rotates, the bar will also rotate with this ship.<br>
To prevent this, use <code>get_node("Sprite2D")</code> or <code>$Sprite2D</code> to access the rotation property of the ship directly.<br>
I think this might be a problem though if the root scene node for the ship was not an Area2D with collision shape circle.<br>
If the shape was anything else, rotating the Sprite without the collision shape would cause a desync in hitboxes relative to the visual sprite.<br>
Could use the same <code>get_node</code> idea to also rotate the collision shape but maybe there is a cleaner way.</p>
<p><img src="https://evanlesmez.com/posts/13-devlog-day12/ship-with-hbar.png" width="30%"></p>
<p>Thanks for reading!</p>
<p><img src="https://media.tenor.com/Cvwzv7Dy6DUAAAAC/edward-cowboy-bebop.gif" style="width:100%"></p>


</section>

 ]]></description>
  <category>gamedev</category>
  <category>godot</category>
  <category>vim</category>
  <guid>https://evanlesmez.com/posts/13-devlog-day12/</guid>
  <pubDate>Tue, 13 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 11</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/12-devlog-day11/</link>
  <description><![CDATA[ 





<p>Only had time for some gamedev today.<br>
I learned a lot about <a href="https://www.memcached.org">memcached</a> though which is an earlier, kind of worse version of redis.<br>
Useful for caching DB queries and probably other expensive data fetching services.<br>
Also in turn learned about telnet which is an earlier, definetly worse version of SSH.<br>
Worse because it has no encryption and the protocol for communicating with the server is not as intuitive.<br>
Useful for LAN servers though, especially old ones that don’t support SSH.</p>
<p>Completely tangential, I got more into tiling window management and discovered <a href="https://github.com/LGUG2Z/komorebi">komorebi</a> for Windows.<br>
On Linux distributions i3 and other programs are available but it is nice to have an option for Windows so my desktop can look like this.</p>
<p><img src="https://evanlesmez.com/posts/12-devlog-day11/desktop-screenshot.png" style="width:100%"></p>
<section id="health-pickups" class="level2">
<h2 class="anchored" data-anchor-id="health-pickups">Health pickups</h2>
<p><img src="https://evanlesmez.com/posts/12-devlog-day11/health-pack-pickups.gif" style="max-height:40em;max-width:100%"></p>
<p>In the gif, you see the ship driving around and picking up the health packs.<br>
In the remote scene tree on the left, the nodes of the health packs are removed once picked up.<br>
This is from the signals emited from the <code>Area2D</code> nodes that have a callback to <code>queue_free</code>.<br>
A common node pattern seems to be:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb1-1">Area2D</span>
<span id="cb1-2">|_ Sprite2D</span>
<span id="cb1-3">  - texture</span>
<span id="cb1-4">  |_ GPUParticles or ther Sprite2Ds or Line2Ds</span>
<span id="cb1-5">|_ CollisionShape2D</span>
<span id="cb1-6">  - shape</span></code></pre></div>
<p>Thank for reading.</p>
<p><img src="https://media.tenor.com/Cvwzv7Dy6DUAAAAC/edward-cowboy-bebop.gif"></p>


</section>

 ]]></description>
  <category>gamedev</category>
  <category>godot</category>
  <category>tools</category>
  <guid>https://evanlesmez.com/posts/12-devlog-day11/</guid>
  <pubDate>Mon, 12 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 10</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/11-devlog-day10/</link>
  <description><![CDATA[ 





<section id="vim-windows" class="level2">
<h2 class="anchored" data-anchor-id="vim-windows">Vim windows</h2>
<p>Today I learned about splitting and managing windows in Vim.<br>
I had some experience with this before but it was a good refresher.<br>
My problem is that I sometimes get mixed up with tmux cmds and Vim ones.<br>
In tmux, Ctrl-B is the beginning of commands.<br>
In Vim, Ctrl-W is the beginning of window commands.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>s <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split window intro rows</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>v <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split window vertically into columns</span></span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:sp</span> {file} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split rows loading file into new window</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:vsp</span> {file} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split cols loading file into new window</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>w <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">or</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cycle between windows</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># you can also ctrl-w into any hjkl move</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:clo</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># close active window but use :q its easier or &lt;Ctrl-w&gt;c</span></span>
<span id="cb1-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:on[ly]</span> or <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>o <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># close all other windows except current</span></span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>= <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># equalize the dimensions of all windows</span></span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>_ <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># max the current window height</span></span>
<span id="cb1-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;|</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># max the current window width</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Moving windows</span></span>
<span id="cb1-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>r <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">or</span> R <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rotates the windows for viewing</span></span>
<span id="cb1-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>x <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># swap neighbor window for current</span></span>
<span id="cb1-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[hjkl]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bring window to the top of that direction</span></span></code></pre></div>
<p>The moving section came from this <a href="http://vimcasts.org/episodes/working-with-windows/">vimcast on Vim windows</a>.</p>
</section>
<section id="godot-area2d-collision-physics" class="level2">
<h2 class="anchored" data-anchor-id="godot-area2d-collision-physics">Godot Area2D Collision physics</h2>
<p>So in previous lessons, I only had tinkered with the <code>Sprite2D</code> node which is for visuals and animations.<br>
However, to get some real physics going between objects, like a collision, <code>Area2D</code> is the node for the job.<br>
It needs a <code>CollisionObject2D</code> as a child node which in turn needs a shape to use.<br>
With those nodes setup, the Area2D signal <code>area_entered</code> may be connected to respond to when another Area2D node collides with this one.<br>
<code>area_entered.connect</code> can be used in the attached script instead of using the signal editor.<br>
It is common to place it in the <code>_ready()</code> function which is what loads the node in the node tree kind of like <code>__init__</code> or <code>constructor</code> for a class in OOP.<br>
The convention for the callback to connect is to name it <code>_on_area_entered</code> implying it is a private method for this node and that it is connected to that signal name.<br>
That pattern will be reused for other signals.</p>
<p>The callback for the case of loot being picked up by a player will likely cause the node to disappear, which means we will use <code>queue_free</code>.<br>
<code>queue_free</code> means to queue up freeing the memory allocated to the node so it will deleted.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb2-1">func _ready():</span>
<span id="cb2-2">  area_entered.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(_on_area_entered)</span>
<span id="cb2-3">  </span>
<span id="cb2-4">func _on_area_entered(area_that_entered: Area2D):</span>
<span id="cb2-5">  queue_free()</span></code></pre></div>
<p>That pattern all together is used in scenes like this:<br>
<img src="https://evanlesmez.com/posts/11-devlog-day10/area2d-collisions.gif" height="500px"></p>
<p>Thank for reading.<br>
<img src="https://media.tenor.com/Cvwzv7Dy6DUAAAAC/edward-cowboy-bebop.gif"></p>


</section>

 ]]></description>
  <category>vim</category>
  <category>gamedev</category>
  <category>godot</category>
  <guid>https://evanlesmez.com/posts/11-devlog-day10/</guid>
  <pubDate>Sun, 11 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 9</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/10-devlog-day9/</link>
  <description><![CDATA[ 





<p>I missed a few days ¯\<em>(ツ)</em>/¯<br>
Oh well.<br>
I DIDN’T MISS TODAY.</p>
<p>On the Godot front, I completed adding some extra art and camera work in line with the GQQuest tutorial.<br>
Here is what it ended up looking like:<br>
<img src="https://evanlesmez.com/posts/10-devlog-day9/ship-in-space.gif" style="300em"></p>
<p>The Camera2D Node was simple, just needed to be plopped as a child of a node (the Ship node in this case) to cause the screen to follow it.<br>
The thruster rendering code though, not so simple.<br>
I don’t understand a lot of what was going on with it.<br>
Also refreshed on how <code>vector.normalized()</code> works under the hood to ensure pointing diagonally is the same speed as horizontal/vertical.<br>
The math stems from the Pythagorean theorem for right angle triangles.<br>
The lengths of the two sides squared, summed, and square rooted is equal to the length of the hypotenuse.<br>
A given vector, like the direction the player wishes to travel at, has length equal to the hypotenuse of the triangle formed by the x and y arguments of the vector.<br>
One side could be 0,0 o x,0, the next side is the x,0 to x,y, and the hypotenuse is 0,0 to x,y.</p>
<p>So to normalize a vector, take the length aka the hypotenuse of the triangle formed by the vector, and divide the x and y by it, essentially turning both into a fraction of the the total length of the vector.<br>
That made sense to me at least.</p>
<section id="vim-buffers-arent-scary" class="level2">
<h2 class="anchored" data-anchor-id="vim-buffers-arent-scary">Vim buffers aren’t scary</h2>
<p>Early on when starting to program I heard the word ‘buffer’ thrown around a lot and I wasn’t sure what it exactly meant.<br>
I imagined kind of like the buffers on the side of roads providing safety by taking up space, the concept of buffers in computer science might be some space in memory that is occupied to make an application more secure or reliable (kind of like roadway safety) in someway.<br>
Well in Vim, that idea is close but it is more like the buffers are in memory representations of the files you open to manipulate.<br>
So not so much reliability or security, and more like core to how the program functions.</p>
<p>Some notes on buffer commands:<br>
Buffers can be opened via glob wildcars like “*” or even “**” for directory recursive file matching.<br>
Common patterns would be *.{extension}<br>
You can list multiple glob patterns like <code>vim **/*.js **/*.go</code></p>
<p><code>args</code> are seperate from bufers opened.<br>
It’s kind of like keeping program windows open in different desktops.<br>
Desktop1 with a few programs would be the args and all of the programs opened all together are the buffers.<br>
<code>:ls</code> would show every program while <code>args</code> would show desktop1’s programs.<br>
<code>args {arglist}</code> clears the current argslist for the new one.<br>
Use glob patterns or filenames however you please for the <code>arglist</code>.</p>
<p>Hidden buffers had gotten me before.<br>
When making a change to a buffer and trying to quit or move to a different buffer, vim will warn you that you have changes that are not written yet.<br>
Kinda nice when you think about it, kind frustrating when you haven’t thought about it and are stuck in a vim window you don’t know how to exit.<br>
Most of the time this is helpful reminder but in the case of <code>:argdo</code> when you want to execute commands on all of the buffers in arglist, if the buffers are manipulated the command will be interrupted on each buffer.<br>
This behavior can be disabled with the <code>hidden</code> setting flag.</p>
<p>Thank for reading.<br>
<img src="https://media.tenor.com/Cvwzv7Dy6DUAAAAC/edward-cowboy-bebop.gif"></p>


</section>

 ]]></description>
  <category>vim</category>
  <category>gamedev</category>
  <category>godot</category>
  <guid>https://evanlesmez.com/posts/10-devlog-day9/</guid>
  <pubDate>Sat, 10 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 8</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/09-devlog-day8/</link>
  <description><![CDATA[ 





<p><img src="https://creazilla-store.fra1.digitaloceanspaces.com/icons/3254509/vim-icon-md.png" style="height:40px"> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Godot_icon.svg/2048px-Godot_icon.svg.png" style="height:40px"></p>
<p>Some quick notes on Vim:<br>
Buffers are in memory representations of files (and probably other things)<br>
You can put a list of vim commands into a file and <code>source</code> it to run on buffers.<br>
e.g.&nbsp;<code>:source {script}.vim</code> in command mode</p>
<p><code>vim {pattern}*.{extension}</code> opens a bunch of files matching the wildcard into buffers.<br>
<code>:ls</code> or :args<code>lists the buffers open.</code>:first<code></code>:next<code>or</code>:n<code></code>:prev<code>or</code>:previous<code>or</code>:bnext<code>or</code>:bprev<code></code>:bfirst<code></code>:blast` … these all iterate through open buffers.</p>
<p>On Godot I completed a practice problem basd on the steering algorithm from yesterday.<br>
I got a little stuck as the algorithm confused me.<br>
After looking through the notes again it became more clear.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb1-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>.axis(x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right or left</span></span>
<span id="cb1-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>.axis(y) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># down or up</span></span>
<span id="cb1-3"></span>
<span id="cb1-4">max_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># px per frame</span></span>
<span id="cb1-5">steering_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># how jittery should the movement be to a new input</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vector2D(x,y).normalized() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalized to keep length less than 1</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">desired_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> direction</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this part is the visual of the vector that connects from the head of the current velocity to the head of the desired_velocity</span></span>
<span id="cb1-12">steering_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  desired_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> velocity <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># velocity is the previous velocity</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this part confused me. Why add to the velocity? </span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We are adding the steering_vector scaled down by the delta (probably 1/60th of a seond given usual 60 FPS) </span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># It is also scaled down by the arbitrary steering_factor we defined above. So as long as the steering_factor is less than 60, there should be some smoothing</span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># At 60 I belive it would look the same as never smoothing the velocity as you are adding the difference between the desired_velocity and the current velocity to the current velocity.</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cancel out current velocity, you are left with just the desired_velocity</span></span>
<span id="cb1-19">velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> steering_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> steering_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> delta</span>
<span id="cb1-20">position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> delta</span></code></pre></div>



 ]]></description>
  <category>vim</category>
  <category>gamedev</category>
  <category>godot</category>
  <guid>https://evanlesmez.com/posts/09-devlog-day8/</guid>
  <pubDate>Wed, 07 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 7</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/08-devlog-day7/</link>
  <description><![CDATA[ 





<p>I continued working through the Pracitval Vim book today.<br>
I learned about the cmd line window which is different from the command-line mode.<br>
Accidentally I have ended up there numerous time by accidentally typing <code>q:</code> rather than <code>:q</code> to exit a file.<br>
Previously, it had nover occurred to me to examine what was was going on and instead I would repeat <code>:q</code> twice to exit the mysterious window I was trapped in and then to exit the file as intended.<br>
Now, I realize that this window allows you to see the history of command you have typed into the command mode as a buffer.<br>
You may navigate the history as you like and even manipulate it to run new commands.<br>
For example, you could find a command you had split into two like <code>lint file</code> and <code>test file</code>.<br>
If you hover over <code>lint file</code> in cmd line window, and go to the end with <code>A</code> and insert a pipe char <code>|</code>, you can then enter <code>J</code> to move the line below to the current line which should result in <code>lint file | test file</code>.<br>
Then <cr> aka “Enter” to run your now single line command.</cr></p>
<p>I also learned you may enter a enw shell session by typing <code>:shell</code> in the command mode but more interesting is that you can background Vim or any shell process with <code>Ctrl+Z</code>.<br>
Then you may list jobs with <code>jobs</code>.<br>
If you wish to reattach a job, just foreground it with <code>fg</code>.<br>
Definetly going to use this in the future.</p>
<p>Other random notes:<br>
<code>:ls</code> list the open vim buffers while <code>:!ls</code> does what any UNIX user would expect.<br>
<code>write !sh</code> is a neat quick way to run each command in the current buffer in shell environment.<br>
<code>read</code> instead puts command output into the buffer.<br>
<code>%</code> refers to the current filename of the buffer.<br>
<code>!</code> is reffered to as “bang” for executing shell commands.</p>
<p>On the Godot front:</p>
<p><img src="https://evanlesmez.com/posts/08-devlog-day7/ship-steering-vector.gif" height="500px"></p>
<p>I completed adding a boost effect to the moving ship by hitting spacebar.<br>
That was pretty simple as it only required increasing the speed to multiply the direction velocity vector by.<br>
More interesting was the method for smoothing movement.<br>
As shown in the gif above, the method to determine the desired velocity vector was to multiply the speed scalar by the direction vector based on the current movement inputs (including boost).</p>
<p>Subtracting the current velocity from the desired velocity vector gives us the steering vector or the vector that points in the direction the ship should turn to correct course smoothly from its current state.<br>
Then we introduce another scalar that we can call <code>steering_amplifier</code> between 0 to 1 (but really above that because we multiply by the delta which is below 1) that is used to determine the lagginess feel of the controls.<br>
A high value would make the controls not lag at all but also look jittery.<br>
A low value would feel laggy for movevent of the ship to even stop moving after releasing the controls, however can’t argue it not smoother than the higher steering values.</p>



 ]]></description>
  <category>vim</category>
  <category>gamedev</category>
  <category>tech</category>
  <guid>https://evanlesmez.com/posts/08-devlog-day7/</guid>
  <pubDate>Tue, 06 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 6</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/07-devlog-day6/</link>
  <description><![CDATA[ 





<p>I practiced some Vim today in the same Practical Vim book.<br>
Learned that Vim writes history to <code>vim info</code> file that persists across machine boots.<br>
The history is not only execute commands but also search patterns and I am sure other commands.<br>
In execute command mode <code>Ctrl-d</code>.<br>
<code>*</code> in normal mode searches for the hovered word.<br>
<code>&lt;C-r&gt;&lt;C-w&gt;</code> in execute mode copies the current word in as pattern for things like substitutions.</p>
<p>In Godot, I practiced making a space ship move with player inputs.<br>
The most important parts were adding the controls in the Project settings.<br>
The <code>direction</code> is stored as a <code>2DVector</code>.<br>
The <code>Input</code> object has an <code>axis</code> method that accepts two input arguments like “move_down” or “move_up” to map values between -1 and 1 to.<br>
<code>direction</code> is updated to match these values and then scaled by whatever speed is desired.<br>
Lastly, the <code>direction</code> vector must be <code>normalized</code> if the <code>length</code> is above 1.0 which happens when moving diagonally which would make the ship move 1.4 times faster #pythagoreantheorum.</p>
<p><img src="https://evanlesmez.com/posts/07-devlog-day6/ship.png" style="height:300px;"></p>



 ]]></description>
  <category>vim</category>
  <category>gamedev</category>
  <guid>https://evanlesmez.com/posts/07-devlog-day6/</guid>
  <pubDate>Mon, 05 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 5</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/06-devlog-day5/</link>
  <description><![CDATA[ 





<p>After watching some ThePrimegean vids, I was inspired to get back into using NeoVim as my primary text editor.<br>
I had the “Practical Vim” book lying around so I picked it back up again and started practicing.</p>
<p>Some Vim notes I took today:<br>
Ex Commands are intended for longer range where as normal commands are more local to a region of the document being edited.<br>
Capital V is a full linve visual select rather than lower v.<br>
<code>:t</code> or <code>:co</code> is shortand for copy.<br>
<code>:m</code> is shorthand for move <code>:$</code> is end of file.<br>
<code>:1</code> is first line<br>
<code>:'&lt;,'&gt;</code> is current visual selection.<br>
<code>:{range} normal .</code> runs the prev normal mode command on the range. this builds off that . is the key to repeat the last normal mode command. <code>:%:</code> repeats the last EX command</p>
<p>Back to GDQuest Godot:<br>
<a href="https://github.com/joshnajera/godot-vim">From the godot-vim repo</a> I downloaded the zip and enabled the plugin for Vim bindings in Godot editor.<br>
Some of the bindings are missing like execute mode and <code>Ctrl+[</code> to exit insert mode unfortunately.<br>
In Godot, position of objects is manipulated by the <code>position</code> attribute of the node.<br>
You can add or subtract 2D vectors to change the position relative to the prev position in the <code>_process</code> method of the node.<br>
Vector2D comes with an <code>angle</code> method that gives the angle of the vector probably in relation to to the positive direction of the x axis.<br>
Using this angle, you can manipulate the <code>rotation</code> attribute of a node to keep the direction of the object facing the direction of velocity.<br>
Helpful for sprites like this ship.</p>
<p><img src="https://evanlesmez.com/posts/06-devlog-day5/ship.gif" width="500px"></p>



 ]]></description>
  <category>vim</category>
  <category>gamedev</category>
  <category>theprimagean</category>
  <guid>https://evanlesmez.com/posts/06-devlog-day5/</guid>
  <pubDate>Sun, 04 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 4</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/05-devlog-day4/</link>
  <description><![CDATA[ 





<p>Today I completed the intro to GDSript games and learned a few interesting things:</p>
<p>The <code>_process</code> builtin function is the “game loop” of Godot to place code that needs to trigger every frame.<br>
It has a parameter called ‘delta’.<br>
Delta is a time difference since the previous frame.<br>
Referencing delta in calculations helps the game feel more smooth across various frame rates.<br>
<code>lerp</code> is a function that returns a weighted average between two values (linear interpolation).<br>
You can auto type hint with the <code>:=</code> operator like <code>var name := "gibby"</code>.<br>
Most importantly, GDScript is basically Python.</p>
<p>Up next is working on a top-down action game in space.</p>
<p><img src="https://evanlesmez.com/posts/05-devlog-day4/gdquest_boy.png" width="800px"></p>



 ]]></description>
  <category>gamedev</category>
  <category>video games</category>
  <category>tech</category>
  <guid>https://evanlesmez.com/posts/05-devlog-day4/</guid>
  <pubDate>Sat, 03 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 3</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/04-devlog-day3/</link>
  <description><![CDATA[ 





<p>Today I learned about GDScript, Godot’s scripting language.<br>
It looks like a blend of Python and Javascript.<br>
Python because of the indentation and Javascript because of the var keyword used for creating variables.<br>
I did not have as much time today so I did about 3 of the starter lessons. Most of it was a little too simple but did at least learn some syntax and a few builtin functions.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shows a game entity like a character</span></span>
<span id="cb1-2">show()</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hides the entity</span></span>
<span id="cb1-5">hide()</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># what you would expect</span></span>
<span id="cb1-8">rotate(radians:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span></code></pre></div>
<p>Used those to make this turtle draw some rectangles.</p>
<p><img src="https://evanlesmez.com/posts/04-devlog-day3/turtle-game.png" style="width: 700px"></p>



 ]]></description>
  <category>gamedev</category>
  <category>video games</category>
  <category>tech</category>
  <guid>https://evanlesmez.com/posts/04-devlog-day3/</guid>
  <pubDate>Wed, 31 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 2</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/03-devlog-day2/</link>
  <description><![CDATA[ 





<p><img src="https://evanlesmez.com/posts/03-devlog-day2/editor-screenshot.png" style="height: 600px"></p>
<p>Today I completed the tour of Godot game made by the GDQuest creators.<br>
Learned about TileMap nodes to create repeating visual 2D blocks used in old games like Zelda.<br>
Used “Terrains” to create instances of the TileMaps faster.<br>
Collision shapes like invisible walls can be represented by shapes in the scene editor to convey that a space is off limits.<br>
Repeated using a signal to hook up a player node to a UI health bar when an enemy did damage.</p>
<p>Note:<br>
Backgrounds add a lot to the feel of a game as does looting a chest.</p>
<p>I asked a question in the last lesson about any gamedev podcast recommendations.<br>
Not exactly gamedev, but the creator of the course recommended theprimegean so I watched a few videos today about Vim and made me want to get back on switching to neovim as my editor.<br>
Currently I use vim mode wherever possible such as VSCode, Jupyter Lab, Obsidian …<br>
I did setup neovim with some Lua plugins but was still too slow compared to working in VS Code for basic things like creating a new file, copying files, searching through all the files for a class…<br>
But might be time to start trying again.<br>
Found some Godot 4 Vim binding plugins for GDScript which will be helpful.</p>
<p>Tomorrow I will be moving onto the <a href="https://school.gdquest.com/courses/learn_2d_gamedev_godot_4/learn_gdscript/learn_gdscript_app">next lesson on GDScript</a>.</p>



 ]]></description>
  <category>gamedev</category>
  <category>video games</category>
  <category>tech</category>
  <guid>https://evanlesmez.com/posts/03-devlog-day2/</guid>
  <pubDate>Wed, 31 Jul 2024 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
