<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Ev&#39;s blog 🐒🐧🐍</title>
<link>https://evanlesmez.com/index.html</link>
<atom:link href="https://evanlesmez.com/index.xml" rel="self" type="application/rss+xml"/>
<description>Ev&#39;s blog</description>
<generator>quarto-1.3.340</generator>
<lastBuildDate>Fri, 12 May 2023 04:00:00 GMT</lastBuildDate>
<item>
  <title>First Steps: AI for Animal Advocacy with Fastai 🐇</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/2023-04-28-first-post-fastai/index.html</link>
  <description><![CDATA[ 




<div class="cell" data-tags="[]" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb1-2"></span>
<span id="cb1-3">smol_forest_guardian <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(</span>
<span id="cb1-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./DALL·E-digital_art_cute_solarpunk_forest_guardian_robot.png"</span></span>
<span id="cb1-5">)</span>
<span id="cb1-6">display(</span>
<span id="cb1-7">    smol_forest_guardian.resize((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>)),</span>
<span id="cb1-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Solar punk forest guardian source: DALLE·2"</span>,</span>
<span id="cb1-9">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://evanlesmez.com/posts/2023-04-28-first-post-fastai/index_files/figure-html/cell-2-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Solar punk forest guardian source: DALLE·2'</code></pre>
</div>
</div>
<p>This charming little forest robot was created using <a href="https://labs.openai.com/">OpenAI’s DALL·E 2 model</a>, based on my prompt: “Digital art cute solarpunk forest guardian robot”.</p>
<p>This image represents an idea I’ve been interested in for a long time. I’m not certain where it all started, but I think it goes back to my childhood. That’s when my aunt introduced me to my first Miyazaki movies: ‘My Neighbor Totoro’, ‘Spirited Away’, and ‘Castle in the Sky’.</p>
<div class="cell" data-tags="[]" data-execution_count="5">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">big_guardian <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./castle_in_sky_guardian.jpg"</span>)</span>
<span id="cb3-2">ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.33</span></span>
<span id="cb3-3">new_dimens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(big_guardian.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ratio), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(big_guardian.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ratio))</span>
<span id="cb3-4">display(</span>
<span id="cb3-5">    big_guardian.resize(new_dimens),</span>
<span id="cb3-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Castle in the Sky Guardian source: https://characterdesignreferences.com/art-of-animation-9/art-of-castle-in-the-sky"</span>,</span>
<span id="cb3-7">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://evanlesmez.com/posts/2023-04-28-first-post-fastai/index_files/figure-html/cell-3-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Castle in the Sky Guardian source: https://characterdesignreferences.com/art-of-animation-9/art-of-castle-in-the-sky'</code></pre>
</div>
</div>
<p>Most Hayao Miyazaki fans, I believe, can relate to the sense of awe they feel when watching his films. He has a unique ability to instill a profound respect for nature, capturing its simple beauty and serving as a daily reminder of how much we often take it for granted. His films advocate for the protection of nature from human exploitation and emphasize the importance of reconnecting with the world around us. The Laputian robot from ‘Castle in the Sky’, depicted above, stands as a compelling example of this message.</p>
<details>
<summary>
<b>🙉❗ Spoiler alert: Click here if you’re okay with that</b>
</summary>
<br> This robot, initially introduced as a deadly weapon designed to protect the royal family of Laputa (the castle in the sky), demonstrates overwhelming destructive power at various points throughout the film.<br> However, a contrasting image is portrayed within the Castle itself, where we see the same model of robot tending gardens, befriending animals, and existing harmoniously with nature.<br> This stark dichotomy serves as a potent caution for the evolution of technologies, such as Artificial Intelligence (AI).<br> The choice is ours: Will we opt for peace or plunge into chaos?<br>
</details>
<p><br></p>
<p>A few years ago, perhaps inspired by Miyazaki’s works, I realized my mission: to develop technology that champions the rights of non-human animals and safeguards our shared ecosystems. I envision a future where AI not only respects nature more deeply than humans currently do, but also unravels its secrets that remain undiscovered.</p>
<p>To take steps towards this goal, I am embarking on a journey to learn about deep learning, one of the most promising fields within AI. This blog will serve as a record of my progress, where I’ll document my practice and share related ideas, lessons, and questions that arise along the way.</p>
<section id="fast.ai" class="level2">
<h2 class="anchored" data-anchor-id="fast.ai"><a href="https://www.fast.ai/">fast.ai</a></h2>
<p>Fastai is a vibrant community of deep learning enthusiasts, dedicated to making AI accessible to all. I’m currently going through their ‘Practical Deep Learning for Coders’ course, which has been fantastic thus far!</p>
<p>I’d highly recommend this course to anyone with even a hint of programming experience who’s curious about AI. This is particularly true if you’re in an industry where AI development is still in its infancy - there could be a significant opportunity waiting.</p>
<section id="surprising-discoveries-so-far" class="level3">
<h3 class="anchored" data-anchor-id="surprising-discoveries-so-far">Surprising Discoveries (so far)</h3>
<p>I was astounded by the speed at which I could train and deploy my first model - all within a few weeks of learning.</p>
<p><strong>Transfer learning</strong> is a technique that involves taking a pre-trained model with expert-determined weights and fine-tuning it with your specific data.</p>
<p>This strategy allows you to quickly implement a functioning model, without the need to start from scratch each time. As an example, I trained a simple greenhouse/hydroponic plant health classifier using a pre-trained image classifier model based on the ResNet18 architecture. This was a problem a previous company I worked at was trying to solve, so I thought it would be a fun challenge to undertake myself.</p>
<p>My trained model is now deployed on this <a href="https://huggingface.co/spaces/evylz/plant-doc">🤗 Hugging Face space</a>.</p>
<p>Here’s a fun fact 🤓: A GPU isn’t necessarily required for a deployed model.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://evanlesmez.com/posts/2023-04-28-first-post-fastai/plant-doc-hface.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Screenshot of the plant-doc 🤗 space</figcaption>
</figure>
</div>
<p>Below are some snippets from the training of the model, conducted <a href="https://colab.research.google.com/drive/1k_02v2nxo4Y9ZaKIOm2FeJfvK6AQaLM5?usp=sharing">in a Google Colab notebook</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.widgets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... create a labeled image datablock and visualize</span></span>
<span id="cb5-5"></span>
<span id="cb5-6">hydro_dblock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb5-7">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock),</span>
<span id="cb5-8">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files,</span>
<span id="cb5-9">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb5-10">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb5-11">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>),</span>
<span id="cb5-12">)</span>
<span id="cb5-13">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hydro_dblock.dataloaders(path)</span>
<span id="cb5-14">dls.valid.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://evanlesmez.com/posts/2023-04-28-first-post-fastai/hydro-dblock.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Labeled datablock</figcaption>
</figure>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... use a pretrained learner and fine tune</span></span>
<span id="cb6-2">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb6-3">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://evanlesmez.com/posts/2023-04-28-first-post-fastai/epoch-table-plant-doc.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Epoch table</figcaption>
</figure>
</div>
</section>
<section id="overcoming-initial-fears-in-deep-learning" class="level3">
<h3 class="anchored" data-anchor-id="overcoming-initial-fears-in-deep-learning">Overcoming Initial Fears in Deep Learning</h3>
<p>Before diving into the world of deep learning, I was somewhat daunted by the complexity I feared training and deploying a model would entail. I’m neither a math whiz nor a master coder, but I found many of the initial concepts far more intuitive than I’d anticipated.</p>
<p>For instance, the practice of maintaining a <strong>separate training set of data from a validation set</strong> (and a test set) seemed quite logical. The training set provides the model with a foundational understanding of correct answers, like labeled images. The validation set then serves as a quiz for your model, checking its comprehension of the patterns it has learned. In the context of an image classifier, the model must guess which label best matches a given image from the validation set, and then evaluate the confidence level of its correctness or error. This process facilitates the model’s improvement with each “epoch” or training cycle. Additionally, a completely separate test set, kept hidden from the model, can be used by humans to assess the model’s performance after training is completed.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://evanlesmez.com/posts/2023-04-28-first-post-fastai/https:/assets-global.website-files.com/5d7b77b063a9066d83e1209c/61568656a13218cdde7f6166_training-data-validation-test.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Simplified model training through test diagram</figcaption>
</figure>
</div>
<p>Separating a robust validation set (and test set) helps to prevent overfitting the model to images present only in the training set. Overfitting can render models unreliable for new images encountered outside the “lab” setting.</p>
<p>For instance, if you’re building a cat breed classifier and include numerous images of the same orange cat perched on its cat tower in both the test and validation sets, the model might overfit for that particular scenario.</p>
<p>Another concept I found intuitive and valuable is the confusion matrix. The confusion matrix helps us visualize which labels the model was “confused” by and predicted incorrectly during training. For example, as shown below, the model predicted that a few plants were healthy when they were actually wilted, and vice versa.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClassificationInterpretation.from_learner(learn)</span>
<span id="cb7-2">interp.plot_confusion_matrix()</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://evanlesmez.com/posts/2023-04-28-first-post-fastai/confusion_matrix.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Confusion matrix</figcaption>
</figure>
</div>
<p>We can also plot the top mistakes to visualize the images where the model made incorrect predictions and evaluate the model’s confidence in its decisions. Being confidently wrong is problematic, but so is being correct with low confidence. Both scenarios suggest areas where the model can improve.</p>
<p>In the first case, the model may have ‘learned’ incorrect patterns from the training data, leading to high confidence in wrong predictions. In the second case, the model’s lack of confidence, even when correct, could suggest that it’s struggling to find clear patterns in the data. These are valuable insights that can guide us in improving the model’s performance.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">interp.plot_top_losses(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://evanlesmez.com/posts/2023-04-28-first-post-fastai/top_losses_plot.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Plot of top losses</figcaption>
</figure>
</div>
</section>
<section id="opportunities-for-deep-learning-in-the-animal-and-vegan-advocacy-movement" class="level3">
<h3 class="anchored" data-anchor-id="opportunities-for-deep-learning-in-the-animal-and-vegan-advocacy-movement">Opportunities for Deep Learning in the Animal and Vegan Advocacy Movement</h3>
<p>The Animal and Vegan Advocacy (AVA) movement has a multitude of opportunities to leverage deep learning. Just to name a few:</p>
<ul>
<li>Monitoring wildlife habitats</li>
<li>Identifying illegal deforestation</li>
<li>Flagging illegal fishing vessels</li>
<li>Building vegan education chatbots</li>
<li>Enforcing farmed animal welfare standards</li>
</ul>
<p>Some of these areas are already seeing progress. For example, check out this <a href="https://www2.deloitte.com/nl/nl/pages/consumer/solutions/ai4animals.html">AI4Animals animal welfare issue camera monitoring system developed in the Netherlands</a>.</p>
<p>One of the most intriguing projects I’ve come across in this field is the <a href="https://www.earthspecies.org/">Earth Species Project</a>. Their goal is to decode non-human communication using Natural Language Processing. The potential to understand the ‘secret languages’ animals use could undoubtedly foster more compassion.</p>
</section>
<section id="obstacles-faced-by-the-movement" class="level3">
<h3 class="anchored" data-anchor-id="obstacles-faced-by-the-movement">Obstacles Faced by the Movement</h3>
<p>Non-profit organizations, particularly those advocating for animal rights, often face resource constraints that aren’t an issue for for-profit industries. Even within the landscape of animal non-profits, farmed animal activism <a href="https://animalcharityevaluators.org/donation-advice/why-farmed-animals/">receives only a fraction of the donations that shelters do</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://evanlesmez.com/posts/2023-04-28-first-post-fastai/https:/animalcharityevaluators.org/wp-content/uploads/2013/12/donation-allocation-chart-fullsize-409x264@2x.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Chart of animals impacted and donations received for animal charities</figcaption>
</figure>
</div>
<p>Moreover, non-profits frequently lag behind in technology adoption, making it challenging not only to attract talent like Machine Learning engineers, but also to pursue deep learning-enabled projects that have the potential to make a significant impact.</p>
<p>Large animal agriculture enterprises, armed with extensive resources, are using AI to enhance their efficiency, often without considering animal welfare or ecosystem health. Historically, technology has been used to exploit our environment, damaging natural habitats and harming wildlife. If left unchecked, AI could further this trend.</p>
<p>We need to empower compassionate individuals and policymakers to better understand AI. This will ensure its use strikes a healthier balance between technological advancement and nature, rather than exacerbating existing problems.</p>
<p>Thank you for reading, and stay tuned for more posts in the future!</p>
<p>This blog was built with <a href="https://quarto.org/">Quarto</a> and <a href="https://jupyter.org/">Jupyter</a>, allowing me to embed fun, interactive code generated blocks like the one below.<br>
Try hovering over it.</p>
<div class="cell" data-tags="[]" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.graph_objects <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> go</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.offline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pyo</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set notebook mode to work in offline</span></span>
<span id="cb9-5">pyo.init_notebook_mode()</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Helix equation</span></span>
<span id="cb9-10">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb9-11">x, y, z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.cos(t), np.sin(t), t</span>
<span id="cb9-12"></span>
<span id="cb9-13">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> go.Figure(</span>
<span id="cb9-14">    data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-15">        go.Scatter3d(</span>
<span id="cb9-16">            x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x,</span>
<span id="cb9-17">            y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y,</span>
<span id="cb9-18">            z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>z,</span>
<span id="cb9-19">            mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"markers"</span>,</span>
<span id="cb9-20">            marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>z, colorscale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spectral"</span>, opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>),</span>
<span id="cb9-21">        )</span>
<span id="cb9-22">    ]</span>
<span id="cb9-23">)</span>
<span id="cb9-24"></span>
<span id="cb9-25">fig.update_layout(margin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>)</span>
<span id="cb9-26">fig.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">

<div>                            <div id="126427df-2bdd-486d-b1ec-b64c8445beb6" class="plotly-graph-div" style="height:640px; width:640px;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("126427df-2bdd-486d-b1ec-b64c8445beb6")) {                    Plotly.newPlot(                        "126427df-2bdd-486d-b1ec-b64c8445beb6",                        [{"marker":{"color":[0.0,0.20202020202020202,0.40404040404040403,0.6060606060606061,0.8080808080808081,1.0101010101010102,1.2121212121212122,1.4141414141414141,1.6161616161616161,1.8181818181818181,2.0202020202020203,2.2222222222222223,2.4242424242424243,2.6262626262626263,2.8282828282828283,3.0303030303030303,3.2323232323232323,3.4343434343434343,3.6363636363636362,3.8383838383838382,4.040404040404041,4.242424242424242,4.444444444444445,4.646464646464646,4.848484848484849,5.05050505050505,5.252525252525253,5.454545454545454,5.656565656565657,5.858585858585858,6.0606060606060606,6.262626262626262,6.4646464646464645,6.666666666666667,6.8686868686868685,7.070707070707071,7.2727272727272725,7.474747474747475,7.6767676767676765,7.878787878787879,8.080808080808081,8.282828282828282,8.484848484848484,8.686868686868687,8.88888888888889,9.09090909090909,9.292929292929292,9.494949494949495,9.696969696969697,9.8989898989899,10.1010101010101,10.303030303030303,10.505050505050505,10.707070707070708,10.909090909090908,11.11111111111111,11.313131313131313,11.515151515151516,11.717171717171716,11.919191919191919,12.121212121212121,12.323232323232324,12.525252525252524,12.727272727272727,12.929292929292929,13.131313131313131,13.333333333333334,13.535353535353535,13.737373737373737,13.93939393939394,14.141414141414142,14.343434343434343,14.545454545454545,14.747474747474747,14.94949494949495,15.15151515151515,15.353535353535353,15.555555555555555,15.757575757575758,15.959595959595958,16.161616161616163,16.363636363636363,16.565656565656564,16.767676767676768,16.96969696969697,17.171717171717173,17.373737373737374,17.575757575757574,17.77777777777778,17.97979797979798,18.18181818181818,18.383838383838384,18.585858585858585,18.78787878787879,18.98989898989899,19.19191919191919,19.393939393939394,19.595959595959595,19.7979797979798,20.0],"colorscale":[[0.0,"rgb(158,1,66)"],[0.1,"rgb(213,62,79)"],[0.2,"rgb(244,109,67)"],[0.3,"rgb(253,174,97)"],[0.4,"rgb(254,224,139)"],[0.5,"rgb(255,255,191)"],[0.6,"rgb(230,245,152)"],[0.7,"rgb(171,221,164)"],[0.8,"rgb(102,194,165)"],[0.9,"rgb(50,136,189)"],[1.0,"rgb(94,79,162)"]],"opacity":0.8,"size":12},"mode":"markers","x":[1.0,0.9796632259996998,0.9194800727522776,0.82189840263017,0.6908872083770674,0.5317751800910392,0.3510339684920502,0.15601495992575853,-0.04534973060188524,-0.24486988668507892,-0.43443031567828566,-0.6063209223738354,-0.7535503059294446,-0.8701301249459654,-0.9513186645587279,-0.993813698804694,-0.9958868038686729,-0.9574536592123347,-0.8800774771896732,-0.7669054216542901,-0.6225406016393301,-0.45285484658127084,-0.2647498781834829,-0.06587659290724678,0.13567612713271912,0.33171041770321597,0.5142528686769626,0.6758788309121296,0.810014403075603,0.9112038155344026,0.9753313358637337,0.9997886702873213,0.983581052239521,0.9273677030509753,0.8334350190781794,0.7056035758515253,0.5490727317130796,0.3702091514654802,0.17628785152548898,-0.02480370080544784,-0.22488639862108173,-0.41582216870771727,-0.5898449758557073,-0.7398766950653171,-0.859815004003662,-0.9447815861050266,-0.9913205490138658,-0.9975389879884077,-0.9631839770525324,-0.8896528563926016,-0.779936397574316,-0.638497158251875,-0.4710879741150293,-0.2845179706505102,-0.08637561184970585,0.11527994954575044,0.3122466663798508,0.4965132034409228,0.6605847868889071,0.7977880432989004,0.9025424294354707,0.9705872127458185,0.9991547704697801,0.9870831586770104,0.9348633726492067,0.8446193763599521,0.7200217133240836,0.5661382125698547,0.38922786205169047,0.19648623340319554,-0.004247187491081489,-0.20480786020107072,-0.3970382705782732,-0.5731197257990347,-0.7258903683424182,-0.8491364741458517,-0.9378451868090543,-0.9884084082494465,-0.9987695528527076,-0.9685071961064762,-0.8988522154304799,-0.7926377260247273,-0.6541838480224215,-0.48912199187635547,-0.30416580891556017,-0.106838123325693,0.09483504780155239,0.29265094105990214,0.47856368221963436,0.645011540479259,0.7852244908862596,0.8934995752719529,0.9654328617943044,0.9980985684711091,0.9901680651138731,0.9419639134315667,0.8554467473014667,0.7341355268330447,0.5829644097750302,0.40808206181339196],"y":[0.0,0.2006488565226854,0.3931366121483298,0.5696341069089657,0.7229625614794605,0.8468855636029834,0.9363627251042848,0.9877546923600838,0.9989711717233568,0.9695559491823237,0.9007054462029555,0.7952200570230491,0.6573902466827755,0.4928220425889235,0.30820901749007684,0.11106003812412972,-0.09060614703340773,-0.28858705872043244,-0.47483011082223947,-0.6417601376193878,-0.7825875026542022,-0.8915842573351402,-0.9643171169287782,-0.9978277779792126,-0.9907532430056771,-0.9433812584459996,-0.8576386109880517,-0.7370127583189133,-0.586409981847235,-0.4119558308308628,-0.22074597455506334,-0.020557596287260064,0.18046693235991093,0.37415123057121996,0.5526174707464059,0.7086067976992182,0.8357745720522589,0.9289484292312513,0.9843386578838236,0.9996923408861117,0.9743849894755358,0.9094459434244625,0.8075165041395626,0.6727425035622647,0.510605678474283,0.32770070881349983,0.13146698864295842,-0.07011396040064677,-0.26884312591038406,-0.45663748763377376,-0.6258587825850161,-0.769624180301191,-0.8820862319774624,-0.9586707069567294,-0.9962626429198221,-0.9933330424549106,-0.9500010628071266,-0.8680291693306353,-0.7507514497694541,-0.6029380050795535,-0.43060093249866344,-0.2407497922206855,-0.04110650371268662,0.1602087321472088,0.3550077104499993,0.5353672656012185,0.6939515345770562,0.8243103325011825,0.9211415045489321,0.9805065833960652,0.9999909806585335,0.9788021967690197,0.9178020547461276,0.8194716467944692,0.6878104194817846,0.5281735020569958,0.3470538943436452,0.15181837339991294,-0.04959213944167377,-0.24898556401922536,-0.43825186230718777,-0.609692902437243,-0.7563355690343919,-0.8722153845598611,-0.9526191057745708,-0.9942764280642703,-0.9954930003312314,-0.9562193402649591,-0.8780528469633162,-0.7641728290436485,-0.6192111908811196,-0.4490640366237758,-0.26065185471747443,-0.06163803708687286,0.13988281820384094,0.3357141429738816,0.5178907824351968,0.6790029662980626,0.8124976904186563,0.9129452507276277],"z":[0.0,0.20202020202020202,0.40404040404040403,0.6060606060606061,0.8080808080808081,1.0101010101010102,1.2121212121212122,1.4141414141414141,1.6161616161616161,1.8181818181818181,2.0202020202020203,2.2222222222222223,2.4242424242424243,2.6262626262626263,2.8282828282828283,3.0303030303030303,3.2323232323232323,3.4343434343434343,3.6363636363636362,3.8383838383838382,4.040404040404041,4.242424242424242,4.444444444444445,4.646464646464646,4.848484848484849,5.05050505050505,5.252525252525253,5.454545454545454,5.656565656565657,5.858585858585858,6.0606060606060606,6.262626262626262,6.4646464646464645,6.666666666666667,6.8686868686868685,7.070707070707071,7.2727272727272725,7.474747474747475,7.6767676767676765,7.878787878787879,8.080808080808081,8.282828282828282,8.484848484848484,8.686868686868687,8.88888888888889,9.09090909090909,9.292929292929292,9.494949494949495,9.696969696969697,9.8989898989899,10.1010101010101,10.303030303030303,10.505050505050505,10.707070707070708,10.909090909090908,11.11111111111111,11.313131313131313,11.515151515151516,11.717171717171716,11.919191919191919,12.121212121212121,12.323232323232324,12.525252525252524,12.727272727272727,12.929292929292929,13.131313131313131,13.333333333333334,13.535353535353535,13.737373737373737,13.93939393939394,14.141414141414142,14.343434343434343,14.545454545454545,14.747474747474747,14.94949494949495,15.15151515151515,15.353535353535353,15.555555555555555,15.757575757575758,15.959595959595958,16.161616161616163,16.363636363636363,16.565656565656564,16.767676767676768,16.96969696969697,17.171717171717173,17.373737373737374,17.575757575757574,17.77777777777778,17.97979797979798,18.18181818181818,18.383838383838384,18.585858585858585,18.78787878787879,18.98989898989899,19.19191919191919,19.393939393939394,19.595959595959595,19.7979797979798,20.0],"type":"scatter3d"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}},"margin":{"l":0,"r":0,"b":0,"t":0},"width":640,"height":640},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('126427df-2bdd-486d-b1ec-b64c8445beb6');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>blog</category>
  <category>fastai</category>
  <category>deeplearning</category>
  <guid>https://evanlesmez.com/posts/2023-04-28-first-post-fastai/index.html</guid>
  <pubDate>Fri, 12 May 2023 04:00:00 GMT</pubDate>
  <media:content url="https://evanlesmez.com/posts/2023-04-28-first-post-fastai/DALL·E-digital_art_cute_solarpunk_forest_guardian_robot.png" medium="image" type="image/png" height="144" width="144"/>
</item>
</channel>
</rss>
