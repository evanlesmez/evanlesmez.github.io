<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Evan Lesmez</title>
<link>https://evanlesmez.com/</link>
<atom:link href="https://evanlesmez.com/index.xml" rel="self" type="application/rss+xml"/>
<description>Evan Lesmez&#39;s blog</description>
<generator>quarto-1.5.56</generator>
<lastBuildDate>Sun, 18 Aug 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>Devlog Day 17: Godot random items</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/18-devlog-day17/</link>
  <description><![CDATA[ 





<section id="godot-looting" class="level2">
<h2 class="anchored" data-anchor-id="godot-looting">Godot looting</h2>
<p>Got a little further today.<br>
Repeated setting up the Area2D pattern for handling the on_area_entered signal.<br>
The next step in the project was to randomly generate loot.<br>
This required a base Node2D with a child Timer node.<br>
The timer node was needed to emit <code>timeout</code> signals at regular intervals to trigger item spawns.<br>
<code>get_node("Timer").timeout.connect(_on_timer_timeout)</code></p>
<p>Then to handle the timeout:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb1-1">func _on_timer_timeout() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> void:</span>
<span id="cb1-2">    var random_item_scene: PackedScene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item_scenes.pick_random()</span>
<span id="cb1-3">    var item_instance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> random_item_scene.instantiate()</span>
<span id="cb1-4">    add_child(item_instance)</span></code></pre></div>
<p>It looks a little goofy since I still haven’t removed the hardcoded behavior of <code>queue_free</code> on area entered for items.</p>
<p><img src="https://evanlesmez.com/posts/18-devlog-day17/loot-random.gif" alt="Alternating gem and health pack spawning and destroying each other" style="width:50%"></p>
<p>Random aside, <code>faillock</code> is handy for when you mess up your sudo password a few times in a row and got locked out.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">faillock</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--user</span> {user-who-inted-away-password-attemps} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list your failed attemps</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">faillock</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--user</span> {user-who-trolled} <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--reset</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># resets your lock so you can try again</span></span></code></pre></div>
<p>Thanks for reading!</p>
<p><img src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2F78.media.tumblr.com%2Fbecf220160e6cd331557507ae12f411d%2Ftumblr_mga36uGNoJ1s2r6dwo1_500.gif" style="width:50%"></p>


</section>

 ]]></description>
  <category>gamedev</category>
  <category>godot</category>
  <guid>https://evanlesmez.com/posts/18-devlog-day17/</guid>
  <pubDate>Sun, 18 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 16: Vim windows, IGDA meetups, and Godot looting</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/17-devlog-day16/</link>
  <description><![CDATA[ 





<section id="igda-dc" class="level2">
<h2 class="anchored" data-anchor-id="igda-dc">IGDA DC</h2>
<p>First off, I forgot to mention in the last few posts that I attended an indie game dev meetup.<br>
On last tuesday I met up with ~10 indie game dev/designers as organized by the DC chapter of the International Game Developer’s Association or <a href="https://www.igdadc.org/">IGDA DC</a><br>
It was motivating to see the games people were working on and hear what types of games people liked and wanted to create.</p>
<p>There was a working session today that I also attended to put a few hours into gamedev and share our progress updates together.<br>
There were 7 of us there and I was definetly the newest to gamedev.<br>
The mini PC workstation was definetly a conversation starter.</p>
</section>
<section id="vim" class="level2">
<h2 class="anchored" data-anchor-id="vim">Vim</h2>
<p>Before I went to the IGDA meetup, I got back on the Vim train.<br>
Learned about a few commands.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:find</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># like shell find but in Vim environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:set</span> path+={path}/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">**</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># changes the path that :find will search through for matches</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># netrw commands </span></span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:E</span> or :e. <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># explore the Vim file tree of the cwd</span></span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:Se</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split explore the file tree</span></span>
<span id="cb1-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:Ve</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vertical split explore file treek</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:source</span> .vimrc <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># different from :! souce .vimrc which will have errors becuase .vimrc is not a compatible shell syntax</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span>!mkdir <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> %:h <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create folders and file needed to match buffer path</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:w</span> !sudo tee % <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> /dev/null <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shorcut to sudo write higher permission files</span></span></code></pre></div>
</section>
<section id="godot-looting" class="level2">
<h2 class="anchored" data-anchor-id="godot-looting">Godot looting</h2>
<p>In Godot I added some gem looting mechanics.<br>
Learned how to use node groups to handle <code>area_entered</code> signals seperately for different nodes like gems vs.&nbsp;health packs.<br>
Also learned how to update the UI for a label via the <code>text</code> property.<br>
For progress bar it was <code>value</code>.<br>
So a common pattern for colliding objects seems to be:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Area2D</span></span>
<span id="cb2-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> area_entered signal</span>
<span id="cb2-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CollisionShape2D</span></span>
<span id="cb2-4">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> shape</span>
<span id="cb2-5">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Sprite2D</span></span>
<span id="cb2-6">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> texture</span>
<span id="cb2-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Control</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">UI</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Element</span> Node </span>
<span id="cb2-9">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> value or text</span></code></pre></div>
<p>In the <code>_ready</code> method of the parent node, usually Area2D, the <code>area_entered</code> signal is connected to a callback.<br>
The arg passed to the callback, or the <code>area_that_entered</code> can have a configured group to check <code>is_in_group('group_name')</code>.<br>
If the area that entered should cause an update, the corresponding attribute like health or gems should update, and consequentally trigger an update the attribute in the UI that displays that value.</p>
<p><img src="https://evanlesmez.com/posts/17-devlog-day16/ship-gem-loots.gif" width="100%"></p>
<p>Thanks for reading!</p>
<p><img src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2F78.media.tumblr.com%2Fbecf220160e6cd331557507ae12f411d%2Ftumblr_mga36uGNoJ1s2r6dwo1_500.gif" width="50%"></p>


</section>

 ]]></description>
  <category>vim</category>
  <category>gamedev</category>
  <category>godot</category>
  <guid>https://evanlesmez.com/posts/17-devlog-day16/</guid>
  <pubDate>Sat, 17 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 15: mini PC workstation endeavors with i3</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/16-devlog-day15/</link>
  <description><![CDATA[ 





<p>I have always wanted to tinker around with the i3 tiling window manager.<br>
Recently I started using Pop_OS! tiling feature, and installed <code>komorebi</code> on my Windows gaming machine to replicate.<br>
In doing so, I realized tiling feels way nicer than the default stacking behavior common to most display managers.</p>
<p>So I took the plunge in setting up i3 and love it!</p>
<p><img src="https://evanlesmez.com/posts/16-devlog-day15/arch-i3-ser5.png" style="width:100%"></p>
<p>The keybindings are nice and configurable.<br>
I changed my mod key to be the Win key.<br>
<code>Win+&lt;CR&gt;</code> creates a new terminal.<br>
<code>Win+[h,j,k,l]</code> goes to the window on the screen in that direction (vim motions).<br>
<code>Win+d</code> opens dmenu to choose a program. Critical.<br>
<code>Win+{N}</code> goes to workspace N. Incredibly handy.<br>
<code>Win+Shift+{N}</code> moves window to workspace N. Also incredibly handy starting out.<br>
<code>Win+Shift+q</code> close window.<br>
There are so many more but even with these it feels so comfortable.</p>
<p>Note to get a nice background I used <code>feh</code> and to add opacity I used <code>picom</code> as a compositor.</p>



 ]]></description>
  <category>electronics</category>
  <category>linux</category>
  <guid>https://evanlesmez.com/posts/16-devlog-day15/</guid>
  <pubDate>Fri, 16 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 14: the new mini PC battery worked!</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/15-devlog-day14/</link>
  <description><![CDATA[ 





<p>It worked!<br>
I put the new battery in place, put it into the 20V (19V compatible) DC output mode, and then with a barrel adapter, connected the the DC out of the battery to the mini PC.<br>
I then went through the process of installing a Linux OS and setting up some programs which ended up taking a few hours.</p>
<p><img src="https://evanlesmez.com/posts/15-devlog-day14/mini-pc-workstation-v1.jpg" style="width:100%" alt="mini PC workstation version 1.0.0"></p>



 ]]></description>
  <category>electronics</category>
  <category>mini pc</category>
  <guid>https://evanlesmez.com/posts/15-devlog-day14/</guid>
  <pubDate>Thu, 15 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 13</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/14-devlog-day13/</link>
  <description><![CDATA[ 





<section id="how-it-started" class="level2">
<h2 class="anchored" data-anchor-id="how-it-started">How it started</h2>
<p>Maybe a year or two ago, I jotted an idea down for a portable workstation down in my digital notebook (Obsidian with Syncthing for the curious).<br>
Isn’t that just a laptop you may wonder?<br>
Pretty much except with all of the parts more modular, and I am not talking like Framework laptops.<br>
I mean, take a mini PC, a portable monitor (with VESA compatibilty), a lightweight VESA mount, a keyboard, a mouse, and optionally although not really, a battery.<br>
Why though?</p>
<ol type="1">
<li>Laptop monitors being tethered to keyboards and touchpads is not great for your shoulders and neck<br>
</li>
<li>Each part is swappable. There are many options for each component that goes into it<br>
</li>
<li>Mini PCs are cheaper than many laptops for equal specs<br>
</li>
<li>Fun project</li>
</ol>
<p>I had all the parts sorted, from the <a href="https://www.bee-link.com/products/beelink-ser5-max-5800h">Beelink SER5 mini PC</a> to the <a href="https://hhkeyboard.us/hhkb/pro-classic">HHKB Pro classic mech keyboard</a> to the <a href="https://www.kensington.com/p/products/electronic-control-solutions/trackball-products/slimblade-pro-trackball/">Kensington Trackball mouse</a> along with some shitty cheap LCD monitor.<br>
I picked out one cheap 1 monitor VESA mount to try which worked great.<br>
I got a second one that could hold two monitors that needed some effort to mod to fit in my backpack.<br>
Unfortunately I stripped a few of the bolts so that part is on hold, but the one monitor stand works fine.</p>
<p>I then neeed to pick out a battery.<br>
I saw some interesting multi-device battery pack that advertized 250 W, 230 Wh with an AC outlet and a few USB-C ports.<br>
Seemed a little overkill but would do the job.</p>
</section>
<section id="failure" class="level2">
<h2 class="anchored" data-anchor-id="failure">Failure</h2>
<p>I put all the pieces together, testing the battery powering all the devices.<br>
After preparing my USB with a Linux distro (Arch btw), I started going through the installation procedure.<br>
A few minutes in, the mini PC powered down randomly.<br>
I noticed the USB-C powering the monitor was significantly chewed up by one of the cats so I replaced it and tried again.<br>
I got a lot further this time but about 20 minutes in, the PC crashed again.<br>
I was out of time for some plans with friends but I could not help wondering what was going wrong.</p>
<p>When I got back home I checked the specs of the battery pack on the device.<br>
For the AC outlet, which the mini PC power adapter was plugged into, the specs read “120V ~0.83 A” meaning 110 Volts and 0.83 Amps.<br>
I compared that to the specs on the power adapter which read “AC input, 100-240V 1.5A”.<br>
So I was pretty sure something was off there.</p>
<p>I have not dealt with electriconics physics in a while so I had to some web searching.<br>
Turns out, as I relearned, power (Watts) is <code>volts * amps</code>.<br>
Watts is the unit measurement of power for electrical devices.<br>
Then Watt hours, or Wh, is the power used (or provided by a battery) in an hour.</p>
<p>Back to the battery, with our equation <code>power = volts * amps</code>, <code>110 V * .83 A</code> is 100 Watts.<br>
That is a lot less than the advertized 250 W I saw before.<br>
I went back to the web page and noticed that lower down there was a bullet that read <code>charges a laptop 3 times, 100 W max fast charging</code>.<br>
100 W max fast charging?<br>
I realized they must have meant each port was only capable of 100 W max and that 250 Watts was the total power capacity of the battery.<br>
The vendor definetly could make the description more clear.<br>
I setup a return for that battery pack and started looking for a new one.</p>
</section>
<section id="quest-for-the-battery" class="level2">
<h2 class="anchored" data-anchor-id="quest-for-the-battery">Quest for the battery</h2>
<p>I did some math this time around.<br>
On the specs of the mini PC, I saw that it takes 19V DC at 3.7A.<br>
That is 65 Watts max.<br>
The monitor takes 5V 2A or 10 Watts which can be lowered further by dropping the frame rate, resolution, and brightness.<br>
The other peripherals like mouse and keyboard would add maybe another 5 watts max.</p>
<p>At highest power consumption, 65 + 10 + 5 = <strong>80</strong> watts for the workstation.<br>
Realistically if I was only programming with limited web browsing on a lightweight distro like Arch with XFCE, this would probably be closer to 50W.<br>
I estimated that at a coffee shop I would want at least 2 hours of battery power before needing to find an outlet to be reasonable.<br>
Therefore, I needed 50W * 2h = 100 Wh battery with 19V and &gt;3.7A DC output and &gt;80 Watts max.</p>
<p>Found a couple that met those specs and included barrel connector adapters to plug into the mini PC DC in.<br>
The one I chose ended up specifying mAh (miliAmp hours) rather than Watts so I had to convert.<br>
Lithium Ion batteries have an internal voltage of 3.7V.<br>
Wh = 3.7 * I mAh / 1000.<br>
The battery advertized 50000 mAh so 3.7 * 50000 / 1000 = 185 wH.<br>
Worst case that gives me 2 hours of charge, average case more like 3.5 hours.<br>
Not too shaby.<br>
Bonus was that it only 2 lbs compared to the other one which was 5+ lbs and much larger.</p>
<p>Unforseen con of all of this is that none of these batteries are allowed on planes.</p>
</section>
<section id="thing-i-relearned" class="level2">
<h2 class="anchored" data-anchor-id="thing-i-relearned">Thing I (re)learned</h2>
<ul>
<li><code>Power (Watts) = Volts (V) * Current (Amps)</code><br>
</li>
<li>Wh = Watt hours = Watts * hours<br>
</li>
<li>You need to make sure that batteries are capable of delivering enough watts for all the devices they are powering (sounds obvious but not relevant in most daily life as a programmer)<br>
</li>
<li>Laptop batteries are crazy efficient for their size and safety compatibility<br>
</li>
<li>Lithium Ion batteries operate at 3.7V<br>
</li>
<li>Batteries need to be low Wh and watts to get on planes<br>
</li>
<li>Buying a mini PC with a USB-C cable or 12V DC in would have been smarter for battery options<br>
</li>
<li>When things go wrong, do some research</li>
</ul>
<p>This ended up taking me 3 hours today so no update on gamedev or Vim.</p>
<p>Thanks for reading!</p>
<p><img src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.pinimg.com%2Foriginals%2Ffd%2Ff7%2F46%2Ffdf746569de435d87da6c1e70c3585fc.gif" width="50%"></p>


</section>

 ]]></description>
  <category>electronics</category>
  <category>mini pc</category>
  <guid>https://evanlesmez.com/posts/14-devlog-day13/</guid>
  <pubDate>Wed, 14 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 12</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/13-devlog-day12/</link>
  <description><![CDATA[ 





<section id="vim" class="level2">
<h2 class="anchored" data-anchor-id="vim">Vim</h2>
<section id="tabs" class="level3">
<h3 class="anchored" data-anchor-id="tabs">Tabs</h3>
<p><code>:h tabpage</code></p>
<p>Tabs in Vim are similar to tabs in other programs however the key difference is that one tab in Vim does not map to one file.<br>
Instead, a tab in vim can have several buffers within it as well a window panes that show those buffers.</p>
<p><img src="https://evanlesmez.com/posts/13-devlog-day12/vim-tabs-demo.gif" style="width:100%"></p>
<p>Here are the commands:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:lcd</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the working dir for the current window</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:tabe</span> {filename} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># like edit but open buffer in new tab</span></span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>C-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>T <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># break the window pane into a new tab</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:tabc</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># close current tab</span></span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:tabo</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># close other tabs</span></span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:tabn</span> or gt <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># next tab</span></span>
<span id="cb1-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:tabp</span> or gT <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prev tab</span></span>
<span id="cb1-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:tabmove</span> {N} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># move the Nth tab to beginning</span></span></code></pre></div>
</section>
<section id="files" class="level3">
<h3 class="anchored" data-anchor-id="files">Files</h3>
<p>I also learned about how to open files to buffers quicker rather than typing out full paths.<br>
I already had discovered the <code>%</code> in command mode which represents the current buffer’s filepath.<br>
Combine it into <code>: %:h</code> and press <tab> and the full path to the current buffer is completed for you.<br>
This is handy for when you opened Vim at the root project dir but are opening files nested a few folders down.<br>
If you already have one open, instead of typing out path from root, you can type the path out relative to the current folder.</tab></p>
</section>
</section>
<section id="godot" class="level2">
<h2 class="anchored" data-anchor-id="godot">Godot</h2>
<p>Added a healthbar UI element to the spaceship health pickup scene.<br>
Use a <code>Control</code> node with <code>ProgressBar</code> node nested.<br>
Go into the control section of the inspector tab to change colors via theme overrides (or theme if one is made).<br>
Note though that since these nodes are nested under a parent node that rotates, the bar will also rotate with this ship.<br>
To prevent this, use <code>get_node("Sprite2D")</code> or <code>$Sprite2D</code> to access the rotation property of the ship directly.<br>
I think this might be a problem though if the root scene node for the ship was not an Area2D with collision shape circle.<br>
If the shape was anything else, rotating the Sprite without the collision shape would cause a desync in hitboxes relative to the visual sprite.<br>
Could use the same <code>get_node</code> idea to also rotate the collision shape but maybe there is a cleaner way.</p>
<p><img src="https://evanlesmez.com/posts/13-devlog-day12/ship-with-hbar.png" width="30%"></p>
<p>Thanks for reading!</p>
<p><img src="https://media.tenor.com/Cvwzv7Dy6DUAAAAC/edward-cowboy-bebop.gif" style="width:100%"></p>


</section>

 ]]></description>
  <category>gamedev</category>
  <category>godot</category>
  <category>vim</category>
  <guid>https://evanlesmez.com/posts/13-devlog-day12/</guid>
  <pubDate>Tue, 13 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 11</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/12-devlog-day11/</link>
  <description><![CDATA[ 





<p>Only had time for some gamedev today.<br>
I learned a lot about <a href="https://www.memcached.org">memcached</a> though which is an earlier, kind of worse version of redis.<br>
Useful for caching DB queries and probably other expensive data fetching services.<br>
Also in turn learned about telnet which is an earlier, definetly worse version of SSH.<br>
Worse because it has no encryption and the protocol for communicating with the server is not as intuitive.<br>
Useful for LAN servers though, especially old ones that don’t support SSH.</p>
<p>Completely tangential, I got more into tiling window management and discovered <a href="https://github.com/LGUG2Z/komorebi">komorebi</a> for Windows.<br>
On Linux distributions i3 and other programs are available but it is nice to have an option for Windows so my desktop can look like this.</p>
<p><img src="https://evanlesmez.com/posts/12-devlog-day11/desktop-screenshot.png" style="width:100%"></p>
<section id="health-pickups" class="level2">
<h2 class="anchored" data-anchor-id="health-pickups">Health pickups</h2>
<p><img src="https://evanlesmez.com/posts/12-devlog-day11/health-pack-pickups.gif" style="max-height:40em;max-width:100%"></p>
<p>In the gif, you see the ship driving around and picking up the health packs.<br>
In the remote scene tree on the left, the nodes of the health packs are removed once picked up.<br>
This is from the signals emited from the <code>Area2D</code> nodes that have a callback to <code>queue_free</code>.<br>
A common node pattern seems to be:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb1-1">Area2D</span>
<span id="cb1-2">|_ Sprite2D</span>
<span id="cb1-3">  - texture</span>
<span id="cb1-4">  |_ GPUParticles or ther Sprite2Ds or Line2Ds</span>
<span id="cb1-5">|_ CollisionShape2D</span>
<span id="cb1-6">  - shape</span></code></pre></div>
<p>Thank for reading.</p>
<p><img src="https://media.tenor.com/Cvwzv7Dy6DUAAAAC/edward-cowboy-bebop.gif"></p>


</section>

 ]]></description>
  <category>gamedev</category>
  <category>godot</category>
  <category>tools</category>
  <guid>https://evanlesmez.com/posts/12-devlog-day11/</guid>
  <pubDate>Mon, 12 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 10</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/11-devlog-day10/</link>
  <description><![CDATA[ 





<section id="vim-windows" class="level2">
<h2 class="anchored" data-anchor-id="vim-windows">Vim windows</h2>
<p>Today I learned about splitting and managing windows in Vim.<br>
I had some experience with this before but it was a good refresher.<br>
My problem is that I sometimes get mixed up with tmux cmds and Vim ones.<br>
In tmux, Ctrl-B is the beginning of commands.<br>
In Vim, Ctrl-W is the beginning of window commands.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>s <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split window intro rows</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>v <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split window vertically into columns</span></span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:sp</span> {file} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split rows loading file into new window</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:vsp</span> {file} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split cols loading file into new window</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>w <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">or</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cycle between windows</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># you can also ctrl-w into any hjkl move</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:clo</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># close active window but use :q its easier or &lt;Ctrl-w&gt;c</span></span>
<span id="cb1-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:on[ly]</span> or <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>o <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># close all other windows except current</span></span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>= <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># equalize the dimensions of all windows</span></span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>_ <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># max the current window height</span></span>
<span id="cb1-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;|</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># max the current window width</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Moving windows</span></span>
<span id="cb1-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>r <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">or</span> R <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rotates the windows for viewing</span></span>
<span id="cb1-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>x <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># swap neighbor window for current</span></span>
<span id="cb1-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ctrl-w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[hjkl]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bring window to the top of that direction</span></span></code></pre></div>
<p>The moving section came from this <a href="http://vimcasts.org/episodes/working-with-windows/">vimcast on Vim windows</a>.</p>
</section>
<section id="godot-area2d-collision-physics" class="level2">
<h2 class="anchored" data-anchor-id="godot-area2d-collision-physics">Godot Area2D Collision physics</h2>
<p>So in previous lessons, I only had tinkered with the <code>Sprite2D</code> node which is for visuals and animations.<br>
However, to get some real physics going between objects, like a collision, <code>Area2D</code> is the node for the job.<br>
It needs a <code>CollisionObject2D</code> as a child node which in turn needs a shape to use.<br>
With those nodes setup, the Area2D signal <code>area_entered</code> may be connected to respond to when another Area2D node collides with this one.<br>
<code>area_entered.connect</code> can be used in the attached script instead of using the signal editor.<br>
It is common to place it in the <code>_ready()</code> function which is what loads the node in the node tree kind of like <code>__init__</code> or <code>constructor</code> for a class in OOP.<br>
The convention for the callback to connect is to name it <code>_on_area_entered</code> implying it is a private method for this node and that it is connected to that signal name.<br>
That pattern will be reused for other signals.</p>
<p>The callback for the case of loot being picked up by a player will likely cause the node to disappear, which means we will use <code>queue_free</code>.<br>
<code>queue_free</code> means to queue up freeing the memory allocated to the node so it will deleted.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb2-1">func _ready():</span>
<span id="cb2-2">  area_entered.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(_on_area_entered)</span>
<span id="cb2-3">  </span>
<span id="cb2-4">func _on_area_entered(area_that_entered: Area2D):</span>
<span id="cb2-5">  queue_free()</span></code></pre></div>
<p>That pattern all together is used in scenes like this:<br>
<img src="https://evanlesmez.com/posts/11-devlog-day10/area2d-collisions.gif" height="500px"></p>
<p>Thank for reading.<br>
<img src="https://media.tenor.com/Cvwzv7Dy6DUAAAAC/edward-cowboy-bebop.gif"></p>


</section>

 ]]></description>
  <category>vim</category>
  <category>gamedev</category>
  <category>godot</category>
  <guid>https://evanlesmez.com/posts/11-devlog-day10/</guid>
  <pubDate>Sun, 11 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 9</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/10-devlog-day9/</link>
  <description><![CDATA[ 





<p>I missed a few days ¯\<em>(ツ)</em>/¯<br>
Oh well.<br>
I DIDN’T MISS TODAY.</p>
<p>On the Godot front, I completed adding some extra art and camera work in line with the GQQuest tutorial.<br>
Here is what it ended up looking like:<br>
<img src="https://evanlesmez.com/posts/10-devlog-day9/ship-in-space.gif" style="300em"></p>
<p>The Camera2D Node was simple, just needed to be plopped as a child of a node (the Ship node in this case) to cause the screen to follow it.<br>
The thruster rendering code though, not so simple.<br>
I don’t understand a lot of what was going on with it.<br>
Also refreshed on how <code>vector.normalized()</code> works under the hood to ensure pointing diagonally is the same speed as horizontal/vertical.<br>
The math stems from the Pythagorean theorem for right angle triangles.<br>
The lengths of the two sides squared, summed, and square rooted is equal to the length of the hypotenuse.<br>
A given vector, like the direction the player wishes to travel at, has length equal to the hypotenuse of the triangle formed by the x and y arguments of the vector.<br>
One side could be 0,0 o x,0, the next side is the x,0 to x,y, and the hypotenuse is 0,0 to x,y.</p>
<p>So to normalize a vector, take the length aka the hypotenuse of the triangle formed by the vector, and divide the x and y by it, essentially turning both into a fraction of the the total length of the vector.<br>
That made sense to me at least.</p>
<section id="vim-buffers-arent-scary" class="level2">
<h2 class="anchored" data-anchor-id="vim-buffers-arent-scary">Vim buffers aren’t scary</h2>
<p>Early on when starting to program I heard the word ‘buffer’ thrown around a lot and I wasn’t sure what it exactly meant.<br>
I imagined kind of like the buffers on the side of roads providing safety by taking up space, the concept of buffers in computer science might be some space in memory that is occupied to make an application more secure or reliable (kind of like roadway safety) in someway.<br>
Well in Vim, that idea is close but it is more like the buffers are in memory representations of the files you open to manipulate.<br>
So not so much reliability or security, and more like core to how the program functions.</p>
<p>Some notes on buffer commands:<br>
Buffers can be opened via glob wildcars like “*” or even “**” for directory recursive file matching.<br>
Common patterns would be *.{extension}<br>
You can list multiple glob patterns like <code>vim **/*.js **/*.go</code></p>
<p><code>args</code> are seperate from bufers opened.<br>
It’s kind of like keeping program windows open in different desktops.<br>
Desktop1 with a few programs would be the args and all of the programs opened all together are the buffers.<br>
<code>:ls</code> would show every program while <code>args</code> would show desktop1’s programs.<br>
<code>args {arglist}</code> clears the current argslist for the new one.<br>
Use glob patterns or filenames however you please for the <code>arglist</code>.</p>
<p>Hidden buffers had gotten me before.<br>
When making a change to a buffer and trying to quit or move to a different buffer, vim will warn you that you have changes that are not written yet.<br>
Kinda nice when you think about it, kind frustrating when you haven’t thought about it and are stuck in a vim window you don’t know how to exit.<br>
Most of the time this is helpful reminder but in the case of <code>:argdo</code> when you want to execute commands on all of the buffers in arglist, if the buffers are manipulated the command will be interrupted on each buffer.<br>
This behavior can be disabled with the <code>hidden</code> setting flag.</p>
<p>Thank for reading.<br>
<img src="https://media.tenor.com/Cvwzv7Dy6DUAAAAC/edward-cowboy-bebop.gif"></p>


</section>

 ]]></description>
  <category>vim</category>
  <category>gamedev</category>
  <category>godot</category>
  <guid>https://evanlesmez.com/posts/10-devlog-day9/</guid>
  <pubDate>Sat, 10 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 8</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/09-devlog-day8/</link>
  <description><![CDATA[ 





<p><img src="https://creazilla-store.fra1.digitaloceanspaces.com/icons/3254509/vim-icon-md.png" style="height:40px"> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Godot_icon.svg/2048px-Godot_icon.svg.png" style="height:40px"></p>
<p>Some quick notes on Vim:<br>
Buffers are in memory representations of files (and probably other things)<br>
You can put a list of vim commands into a file and <code>source</code> it to run on buffers.<br>
e.g.&nbsp;<code>:source {script}.vim</code> in command mode</p>
<p><code>vim {pattern}*.{extension}</code> opens a bunch of files matching the wildcard into buffers.<br>
<code>:ls</code> or :args<code>lists the buffers open.</code>:first<code></code>:next<code>or</code>:n<code></code>:prev<code>or</code>:previous<code>or</code>:bnext<code>or</code>:bprev<code></code>:bfirst<code></code>:blast` … these all iterate through open buffers.</p>
<p>On Godot I completed a practice problem basd on the steering algorithm from yesterday.<br>
I got a little stuck as the algorithm confused me.<br>
After looking through the notes again it became more clear.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb1-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>.axis(x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right or left</span></span>
<span id="cb1-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>.axis(y) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># down or up</span></span>
<span id="cb1-3"></span>
<span id="cb1-4">max_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># px per frame</span></span>
<span id="cb1-5">steering_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># how jittery should the movement be to a new input</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vector2D(x,y).normalized() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalized to keep length less than 1</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">desired_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> direction</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this part is the visual of the vector that connects from the head of the current velocity to the head of the desired_velocity</span></span>
<span id="cb1-12">steering_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  desired_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> velocity <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># velocity is the previous velocity</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this part confused me. Why add to the velocity? </span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We are adding the steering_vector scaled down by the delta (probably 1/60th of a seond given usual 60 FPS) </span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># It is also scaled down by the arbitrary steering_factor we defined above. So as long as the steering_factor is less than 60, there should be some smoothing</span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># At 60 I belive it would look the same as never smoothing the velocity as you are adding the difference between the desired_velocity and the current velocity to the current velocity.</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cancel out current velocity, you are left with just the desired_velocity</span></span>
<span id="cb1-19">velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> steering_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> steering_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> delta</span>
<span id="cb1-20">position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> delta</span></code></pre></div>



 ]]></description>
  <category>vim</category>
  <category>gamedev</category>
  <category>godot</category>
  <guid>https://evanlesmez.com/posts/09-devlog-day8/</guid>
  <pubDate>Wed, 07 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 7</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/08-devlog-day7/</link>
  <description><![CDATA[ 





<p>I continued working through the Pracitval Vim book today.<br>
I learned about the cmd line window which is different from the command-line mode.<br>
Accidentally I have ended up there numerous time by accidentally typing <code>q:</code> rather than <code>:q</code> to exit a file.<br>
Previously, it had nover occurred to me to examine what was was going on and instead I would repeat <code>:q</code> twice to exit the mysterious window I was trapped in and then to exit the file as intended.<br>
Now, I realize that this window allows you to see the history of command you have typed into the command mode as a buffer.<br>
You may navigate the history as you like and even manipulate it to run new commands.<br>
For example, you could find a command you had split into two like <code>lint file</code> and <code>test file</code>.<br>
If you hover over <code>lint file</code> in cmd line window, and go to the end with <code>A</code> and insert a pipe char <code>|</code>, you can then enter <code>J</code> to move the line below to the current line which should result in <code>lint file | test file</code>.<br>
Then <cr> aka “Enter” to run your now single line command.</cr></p>
<p>I also learned you may enter a enw shell session by typing <code>:shell</code> in the command mode but more interesting is that you can background Vim or any shell process with <code>Ctrl+Z</code>.<br>
Then you may list jobs with <code>jobs</code>.<br>
If you wish to reattach a job, just foreground it with <code>fg</code>.<br>
Definetly going to use this in the future.</p>
<p>Other random notes:<br>
<code>:ls</code> list the open vim buffers while <code>:!ls</code> does what any UNIX user would expect.<br>
<code>write !sh</code> is a neat quick way to run each command in the current buffer in shell environment.<br>
<code>read</code> instead puts command output into the buffer.<br>
<code>%</code> refers to the current filename of the buffer.<br>
<code>!</code> is reffered to as “bang” for executing shell commands.</p>
<p>On the Godot front:</p>
<p><img src="https://evanlesmez.com/posts/08-devlog-day7/ship-steering-vector.gif" height="500px"></p>
<p>I completed adding a boost effect to the moving ship by hitting spacebar.<br>
That was pretty simple as it only required increasing the speed to multiply the direction velocity vector by.<br>
More interesting was the method for smoothing movement.<br>
As shown in the gif above, the method to determine the desired velocity vector was to multiply the speed scalar by the direction vector based on the current movement inputs (including boost).</p>
<p>Subtracting the current velocity from the desired velocity vector gives us the steering vector or the vector that points in the direction the ship should turn to correct course smoothly from its current state.<br>
Then we introduce another scalar that we can call <code>steering_amplifier</code> between 0 to 1 (but really above that because we multiply by the delta which is below 1) that is used to determine the lagginess feel of the controls.<br>
A high value would make the controls not lag at all but also look jittery.<br>
A low value would feel laggy for movevent of the ship to even stop moving after releasing the controls, however can’t argue it not smoother than the higher steering values.</p>



 ]]></description>
  <category>vim</category>
  <category>gamedev</category>
  <category>tech</category>
  <guid>https://evanlesmez.com/posts/08-devlog-day7/</guid>
  <pubDate>Tue, 06 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 6</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/07-devlog-day6/</link>
  <description><![CDATA[ 





<p>I practiced some Vim today in the same Practical Vim book.<br>
Learned that Vim writes history to <code>vim info</code> file that persists across machine boots.<br>
The history is not only execute commands but also search patterns and I am sure other commands.<br>
In execute command mode <code>Ctrl-d</code>.<br>
<code>*</code> in normal mode searches for the hovered word.<br>
<code>&lt;C-r&gt;&lt;C-w&gt;</code> in execute mode copies the current word in as pattern for things like substitutions.</p>
<p>In Godot, I practiced making a space ship move with player inputs.<br>
The most important parts were adding the controls in the Project settings.<br>
The <code>direction</code> is stored as a <code>2DVector</code>.<br>
The <code>Input</code> object has an <code>axis</code> method that accepts two input arguments like “move_down” or “move_up” to map values between -1 and 1 to.<br>
<code>direction</code> is updated to match these values and then scaled by whatever speed is desired.<br>
Lastly, the <code>direction</code> vector must be <code>normalized</code> if the <code>length</code> is above 1.0 which happens when moving diagonally which would make the ship move 1.4 times faster #pythagoreantheorum.</p>
<p><img src="https://evanlesmez.com/posts/07-devlog-day6/ship.png" style="height:300px;"></p>



 ]]></description>
  <category>vim</category>
  <category>gamedev</category>
  <guid>https://evanlesmez.com/posts/07-devlog-day6/</guid>
  <pubDate>Mon, 05 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 5</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/06-devlog-day5/</link>
  <description><![CDATA[ 





<p>After watching some ThePrimegean vids, I was inspired to get back into using NeoVim as my primary text editor.<br>
I had the “Practical Vim” book lying around so I picked it back up again and started practicing.</p>
<p>Some Vim notes I took today:<br>
Ex Commands are intended for longer range where as normal commands are more local to a region of the document being edited.<br>
Capital V is a full linve visual select rather than lower v.<br>
<code>:t</code> or <code>:co</code> is shortand for copy.<br>
<code>:m</code> is shorthand for move <code>:$</code> is end of file.<br>
<code>:1</code> is first line<br>
<code>:'&lt;,'&gt;</code> is current visual selection.<br>
<code>:{range} normal .</code> runs the prev normal mode command on the range. this builds off that . is the key to repeat the last normal mode command. <code>:%:</code> repeats the last EX command</p>
<p>Back to GDQuest Godot:<br>
<a href="https://github.com/joshnajera/godot-vim">From the godot-vim repo</a> I downloaded the zip and enabled the plugin for Vim bindings in Godot editor.<br>
Some of the bindings are missing like execute mode and <code>Ctrl+[</code> to exit insert mode unfortunately.<br>
In Godot, position of objects is manipulated by the <code>position</code> attribute of the node.<br>
You can add or subtract 2D vectors to change the position relative to the prev position in the <code>_process</code> method of the node.<br>
Vector2D comes with an <code>angle</code> method that gives the angle of the vector probably in relation to to the positive direction of the x axis.<br>
Using this angle, you can manipulate the <code>rotation</code> attribute of a node to keep the direction of the object facing the direction of velocity.<br>
Helpful for sprites like this ship.</p>
<p><img src="https://evanlesmez.com/posts/06-devlog-day5/ship.gif" width="500px"></p>



 ]]></description>
  <category>vim</category>
  <category>gamedev</category>
  <category>theprimagean</category>
  <guid>https://evanlesmez.com/posts/06-devlog-day5/</guid>
  <pubDate>Sun, 04 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 4</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/05-devlog-day4/</link>
  <description><![CDATA[ 





<p>Today I completed the intro to GDSript games and learned a few interesting things:</p>
<p>The <code>_process</code> builtin function is the “game loop” of Godot to place code that needs to trigger every frame.<br>
It has a parameter called ‘delta’.<br>
Delta is a time difference since the previous frame.<br>
Referencing delta in calculations helps the game feel more smooth across various frame rates.<br>
<code>lerp</code> is a function that returns a weighted average between two values (linear interpolation).<br>
You can auto type hint with the <code>:=</code> operator like <code>var name := "gibby"</code>.<br>
Most importantly, GDScript is basically Python.</p>
<p>Up next is working on a top-down action game in space.</p>
<p><img src="https://evanlesmez.com/posts/05-devlog-day4/gdquest_boy.png" width="800px"></p>



 ]]></description>
  <category>gamedev</category>
  <category>video games</category>
  <category>tech</category>
  <guid>https://evanlesmez.com/posts/05-devlog-day4/</guid>
  <pubDate>Sat, 03 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 3</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/04-devlog-day3/</link>
  <description><![CDATA[ 





<p>Today I learned about GDScript, Godot’s scripting language.<br>
It looks like a blend of Python and Javascript.<br>
Python because of the indentation and Javascript because of the var keyword used for creating variables.<br>
I did not have as much time today so I did about 3 of the starter lessons. Most of it was a little too simple but did at least learn some syntax and a few builtin functions.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shows a game entity like a character</span></span>
<span id="cb1-2">show()</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hides the entity</span></span>
<span id="cb1-5">hide()</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># what you would expect</span></span>
<span id="cb1-8">rotate(radians:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span></code></pre></div>
<p>Used those to make this turtle draw some rectangles.</p>
<p><img src="https://evanlesmez.com/posts/04-devlog-day3/turtle-game.png" style="width: 700px"></p>



 ]]></description>
  <category>gamedev</category>
  <category>video games</category>
  <category>tech</category>
  <guid>https://evanlesmez.com/posts/04-devlog-day3/</guid>
  <pubDate>Wed, 31 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 2</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/03-devlog-day2/</link>
  <description><![CDATA[ 





<p><img src="https://evanlesmez.com/posts/03-devlog-day2/editor-screenshot.png" style="height: 600px"></p>
<p>Today I completed the tour of Godot game made by the GDQuest creators.<br>
Learned about TileMap nodes to create repeating visual 2D blocks used in old games like Zelda.<br>
Used “Terrains” to create instances of the TileMaps faster.<br>
Collision shapes like invisible walls can be represented by shapes in the scene editor to convey that a space is off limits.<br>
Repeated using a signal to hook up a player node to a UI health bar when an enemy did damage.</p>
<p>Note:<br>
Backgrounds add a lot to the feel of a game as does looting a chest.</p>
<p>I asked a question in the last lesson about any gamedev podcast recommendations.<br>
Not exactly gamedev, but the creator of the course recommended theprimegean so I watched a few videos today about Vim and made me want to get back on switching to neovim as my editor.<br>
Currently I use vim mode wherever possible such as VSCode, Jupyter Lab, Obsidian …<br>
I did setup neovim with some Lua plugins but was still too slow compared to working in VS Code for basic things like creating a new file, copying files, searching through all the files for a class…<br>
But might be time to start trying again.<br>
Found some Godot 4 Vim binding plugins for GDScript which will be helpful.</p>
<p>Tomorrow I will be moving onto the <a href="https://school.gdquest.com/courses/learn_2d_gamedev_godot_4/learn_gdscript/learn_gdscript_app">next lesson on GDScript</a>.</p>



 ]]></description>
  <category>gamedev</category>
  <category>video games</category>
  <category>tech</category>
  <guid>https://evanlesmez.com/posts/03-devlog-day2/</guid>
  <pubDate>Wed, 31 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Devlog Day 1</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/02-devlog-day1/</link>
  <description><![CDATA[ 





<strong>Disclaimer:</strong> Today was not actually my first day of game development nor Godot.<br>
I actually went to nerdy chess and “code” camp back in elementary school and built a simple 2d shooter game.<br>
A several years ago I tinkered with Unity for about a month but lost interest as work at the startup I was with picked up a lot.<br>
Two years ago I discovered Godot and went through the getting started docs.<br>
I built a <a href="https://streamable.com/6baba6">simple 2D dodge the creeps game</a>.<br>

<div style="text-align: center;padding:10px 0;">
<img src="https://evanlesmez.com/posts/02-devlog-day1/dodge_the_creeps_screenshot.png" style="height:400px; margin: 0 auto">
</div>
<p>Yesterday I rebuilt it following along with a <a href="https://www.gdquest.com/tutorial/godot/learning-paths/getting-started-in-2021/chapter/10.your-first-2d-game/">GDQuest tutorial</a> and that brings us to today.<br>
I am starting the <a href="https://school.gdquest.com/products/learn_2d_gamedev_godot_4">Learn 2D Gamedev Godot 4</a> course.</p>
<p>Why am I getting back into gamedev and why am I writing this down?<br>
As to why gamedev:<br>
I have always loved games since I was a kid like Super Smash Bros Melee, Sly Cooper, FIFA, Uncharted 2, CoD Modern Warfare 2, and League of Legends.<br>
I always thought it would be fun to try making one of the several game ideas I have jotted down in my notebooks over the years.<br>
I now know how to code decently well.<br>
I think games are a valuable way to spread ideas, especially on issues I care about like veganism, animal activism, and conservation.</p>
<p>Why am I writing this down?<br>
Mostly to keep myself accountable.<br>
As echoed in both the fastai and GDQuest curriculum, social pressure is inevitablely motivating for every single person wether we admit it or not.<br>
As I don’t have a group of study partners nearby to work on either of those, I am resorting to posting a daily blog that I will share on social media.<br>
I’ll try to keep these short and to the point in 250ish words.</p>
<p>What I learned so far on gamdev and Godot:<br>
* pixel art isn’t as easy as it looks<br>
* vector art is great to start with for beginners making their earliest games<br>
* signals are a convenient design pattern to broadcast events from different game objects to each other to determine what should happen next<br>
* rendering animations for some basic sprites is way simpler than I thought it would be (at least in Godot)<br>
* music and sounds add a lot to how a game feels</p>
<p>For tomorrow I want to continue with the course and hopefully have finished answering the fastai end of chapter questions I have put off for a while.</p>



 ]]></description>
  <category>gamedev</category>
  <category>video games</category>
  <category>tech</category>
  <guid>https://evanlesmez.com/posts/02-devlog-day1/</guid>
  <pubDate>Tue, 30 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Algorithms inherit the prejudices of their creators and society.</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/01-algorithms-inherit-bias/</link>
  <description><![CDATA[ 





<p><img src="https://evanlesmez.com/posts/01-algorithms-inherit-bias/ibm-ceo-tom-watson-sr-with-adolf.png" class="img-fluid" alt="IBM CEO Tom Watson Sr.&nbsp;with Adolf"><br>
<em>IBM leadership with Adolf Hitler</em></p>
<p>In 1939, under the direction of its president, Thomas Watson, IBM released specialized alphabetizing machines.<br>
These machines along with other IBM products played a pivotal role in organizing the deportation of Polish Jews for Nazi Germany.<br>
The IBM leadership didn’t just passively supply; they actively marketed their technology directly to Hitler and his top officials.<br>
Just a few years prior, IBM’s CEO, Tom Watson Sr., had even been honored with a “Service to the Reich” medal.<br>
The company implemented a punch card system to track the method of execution and the ethnicity of each victim.<br>
And to ensure these machines ran efficiently, IBM staff were often present on-site at concentration camps for operation and maintenance.<br>
IBM thrived financially and technologically, but at what cost to humanity?</p>
<p><img src="https://evanlesmez.com/posts/01-algorithms-inherit-bias/ibm-concentration-camp-punchcard.jpeg" class="img-fluid" alt="IBM concentration camp punch-card"><br>
<em>IBM concentration camp punch-card</em> - <a href="https://github.com/fastai/fastbook/blob/master/03_ethics.ipynb">Source</a></p>
<p>We are all aware of the horrors of the holocaust and can agree IBM’s involvement is an egregious example of focusing on technology without care to its impact on society.<br>
Nowadays we are fortunate enough to be in, for the most part, more peaceful times.<br>
However the same ethical questions still arise with development of new technology everyday that changes the way we interact with the world.<br>
The impact of newer tech is often less obvious.</p>
<p>It is clear that directly cooperating with genocidal regimes like the case of IBM or skirting public safety regulations like Theranos with their “one drop of blood” medical diagnostic machines are both extremely unethical decisions.<br>
Compare those examples to the common modern case of a recommendation algorithm running on a computer in a distant server farm that chooses what content people see on a website or app.<br>
At face value it seems much more benign right?<br>
Algorithms must be more objective because they are based on data, and in the case of machine learning algorithms, lots and lots of data at that.</p>
<p>It might seem that way at first until you discover that your video recommendation system is curating playlists of prepubescent partially clothed children to drive engagement of pedophiles on your platform.<br>
<a href="https://www.nytimes.com/2019/06/03/world/americas/youtube-pedophiles.html">This was a very real problem caused by YouTube</a> for the families who had uploaded their innocent home videos of their kids simply enjoying a pool day.<br>
The objectives of the algorithm behind Youtube’s pedophilia curation was actually quite similar to the that of IBM and Theranos.<br>
Similar to IBM’s CEO Tom Watson and Theranos CEO Elizabeth Holmes, the algorithm strived to optimize it’s performance metrics by any means necessary.</p>
<p>When the algorithm received positive feedback by seeing the time spent by a user <em>extremely</em> interested in videos of partially clothed children increase, it was reinforced to serve them more of that content.<br>
When Tom Watson saw IBM profits soar when selling services to Nazi Germany, he was positively reinforced to develop more efficient systems to support genocide.<br>
When Elizabeth Holmes saw herself becoming more and more famous by deceiving patients, employees, and investors, she was positively reinforced to keep the act going.</p>
<p>Each of these actors was caught in a feedback loop that rewarded them for helping the depraved at the expense of the innocent.<br>
Each actor lacked a moral compass to point them in a better direction for the good of society.<br>
Lastly, each actor did not act alone and had supporting actors that were privy to was going on.<br>
They too bear responsibility as they were complicit in the ethical violations of their company.</p>
<p>A major difference to consider between these actors is that even though algorithms are biased like people, they are not <em>actually</em> people (yet).<br>
However, they still inherit the biases of the people that created and trained them.</p>
<section id="types-of-biases" class="level2">
<h2 class="anchored" data-anchor-id="types-of-biases">Types of biases</h2>
<p>Let’s define a few different types of biases inherited from people to machine learning algorithms.<br>
<img src="https://evanlesmez.com/posts/01-algorithms-inherit-bias/pipeline_diagram.svg" class="img-fluid" alt="ML bias pipeline"></p>
<p><strong>Historical bias</strong><br>
People, processes, and society are inherently biased stemming from the past which effects all datasets.</p>
<p>Example <em>race bias</em>:<br>
Black people have historically been victim to racism by white people and this is reflected in data used by algorithms.<br>
The COMPAS algorithm that determines sentencing and bail in the US showed obvious racial bias by disproportionately labeling black Americans as higher risk to re-offend than white Americans by ~20% despite the results showing the predictions should be much closer.<br>
<img src="https://evanlesmez.com/posts/01-algorithms-inherit-bias/pred-fials-for-black-defandants.png" class="img-fluid" alt="2x2 table of black vs white defendant outcomes"></p>
<p><strong>Measurement bias</strong><br>
When we measure the wrong thing or measure it in the wrong way, models make mistakes.</p>
<p>Example:<br>
Predictive models trained on electronic health records determined which factors such as “colonoscopy” and “accidental injury” are highly correlated to being diagnosed with a stroke.<br>
The real prediction here is that people who are more likely to go to doctors <em>at all</em> are more likely get diagnosed with a stroke because they show up more often in the first place.</p>
<p><strong>Representation bias</strong><br>
This one was confusing to me as it seems awfully similar to historical bias.<br>
The idea is that models amplifies the existing bias in the dataset they are trained on.</p>
<p>Example:<br>
In society there are some occupations that employ more women than men.<br>
For example, there are more women who are nurses and there are more men who are pastors.<br>
Occupation prediction models not only demonstrated the existing gender discrepancy across occupations but also over amplified the numbers.<br>
Women were more likely to be nurses while men more likely to be rappers both at a significantly higher margin than was actually true in the training data.<br>
<img src="https://evanlesmez.com/posts/01-algorithms-inherit-bias/gender-occupation-gap.png" class="img-fluid" alt="Gender occupation prediction gap"></p>
<p>That example seems similar to the COMPAS algorithm as both seem to stem from historical bias.<br>
One exhibits gender bias and the other racial.<br>
Maybe the difference lies in how large the amplification of bias between predictions and the training data is.</p>
</section>
<section id="responsibility-of-data-engineers" class="level2">
<h2 class="anchored" data-anchor-id="responsibility-of-data-engineers">Responsibility of data engineers</h2>
<p>The consideration of ethics maybe isn’t for everyone.<br>
It is more suited to people with a growth mindset who want to better themselves along with the world around them.<br>
People who spent the time to get through school and work their way into the data science field are definitely capable of logically analyzing complex systems.<br>
It is a matter of devoting some of their brain power they spent years building to think about how the model they are training can better serve people and animals outside of their company rather than just the ones within.</p>
<p>There are no 100% correct answers when it comes to handling biases ethically.<br>
However, there is value in weighing which approaches are better and which are worse.<br>
Although algorithms are not people, hopefully you are convinced that they do inherit the biases of people.<br>
In comparison to traditional hardware tech, algorithms are:</p>
<ul>
<li>cheap to develop</li>
<li>more likely to be implemented without an appeals process</li>
<li>capable of scaling quickly</li>
</ul>
<p>This makes them more volatile and prone to feedback loops that can be highly detrimental.</p>
<p>What are some counter measures data engineers can take?</p>
<ul>
<li>Make algorithms more transparent and able to be visualized by non-technical people</li>
<li>Use more gradual deployment processes with more (diverse) human verification at steps along the way</li>
<li>Think about what bias is in training data and how to mitigate it such as sometimes choosing to omit some biased factors such as ‘gender’<br>
</li>
<li>Ask questions like “How might future generations be affected by this project?” or “Which option will produce the most good and do the least harm?”</li>
</ul>
<p>Thanks for reading all the way through!<br>
If you are curious about reading on about other cases of algorithms gone wrong these were interesting reads:</p>
<p><a href="https://arxiv.org/abs/1301.6822">Discrimination in Online Ad Delivery by Latanya Sweeney</a><br>
<a href="https://www.theverge.com/2018/3/21/17144260/healthcare-medicaid-algorithm-arkansas-cerebral-palsy">What happens when an algorithm cuts your health care</a></p>


</section>

 ]]></description>
  <category>ethics</category>
  <category>ai</category>
  <category>tech</category>
  <guid>https://evanlesmez.com/posts/01-algorithms-inherit-bias/</guid>
  <pubDate>Tue, 17 Oct 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>First Steps: AI for Animal Advocacy with Fastai 🐇</title>
  <dc:creator>Evan Lesmez</dc:creator>
  <link>https://evanlesmez.com/posts/00-first-steps-fastai/</link>
  <description><![CDATA[ 





<div id="7da5697b-102e-4603-9e49-8f2dac208597" class="cell" data-tags="[]" data-execution_count="4">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb1-2"></span>
<span id="cb1-3">smol_forest_guardian <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(</span>
<span id="cb1-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./DALL·E-digital_art_cute_solarpunk_forest_guardian_robot.png"</span></span>
<span id="cb1-5">)</span>
<span id="cb1-6">display(</span>
<span id="cb1-7">    smol_forest_guardian.resize((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>)),</span>
<span id="cb1-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Solar punk forest guardian source: DALLE·2"</span>,</span>
<span id="cb1-9">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://evanlesmez.com/posts/00-first-steps-fastai/index_files/figure-html/cell-2-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Solar punk forest guardian source: DALLE·2'</code></pre>
</div>
</div>
<p>This charming little forest robot was created using <a href="https://labs.openai.com/">OpenAI’s DALL·E 2 model</a>, based on my prompt: “Digital art cute solarpunk forest guardian robot”.</p>
<p>This image represents an idea I’ve been interested in for a long time. I’m not certain where it all started, but I think it goes back to my childhood. That’s when my aunt introduced me to my first Miyazaki movies: ‘My Neighbor Totoro’, ‘Spirited Away’, and ‘Castle in the Sky’.</p>
<div id="cf2af37c-9d9b-4d32-8517-63186487fc40" class="cell" data-tags="[]" data-execution_count="5">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">big_guardian <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./castle_in_sky_guardian.jpg"</span>)</span>
<span id="cb3-2">ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.33</span></span>
<span id="cb3-3">new_dimens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(big_guardian.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ratio), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(big_guardian.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ratio))</span>
<span id="cb3-4">display(</span>
<span id="cb3-5">    big_guardian.resize(new_dimens),</span>
<span id="cb3-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Castle in the Sky Guardian source: https://characterdesignreferences.com/art-of-animation-9/art-of-castle-in-the-sky"</span>,</span>
<span id="cb3-7">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://evanlesmez.com/posts/00-first-steps-fastai/index_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Castle in the Sky Guardian source: https://characterdesignreferences.com/art-of-animation-9/art-of-castle-in-the-sky'</code></pre>
</div>
</div>
<p>Most Hayao Miyazaki fans, I believe, can relate to the sense of awe they feel when watching his films. He has a unique ability to instill a profound respect for nature, capturing its simple beauty and serving as a daily reminder of how much we often take it for granted. His films advocate for the protection of nature from human exploitation and emphasize the importance of reconnecting with the world around us. The Laputian robot from ‘Castle in the Sky’, depicted above, stands as a compelling example of this message.</p>
<details>
<summary>
<b>🙉❗ Spoiler alert: Click here if you’re okay with that</b>
</summary>
<br> This robot, initially introduced as a deadly weapon designed to protect the royal family of Laputa (the castle in the sky), demonstrates overwhelming destructive power at various points throughout the film.<br> However, a contrasting image is portrayed within the Castle itself, where we see the same model of robot tending gardens, befriending animals, and existing harmoniously with nature.<br> This stark dichotomy serves as a potent caution for the evolution of technologies, such as Artificial Intelligence (AI).<br> The choice is ours: Will we opt for peace or plunge into chaos?<br>
</details>
<p><br></p>
<p>A few years ago, perhaps inspired by Miyazaki’s works, I realized my mission: to develop technology that champions the rights of non-human animals and safeguards our shared ecosystems. I envision a future where AI not only respects nature more deeply than humans currently do, but also unravels its secrets that remain undiscovered.</p>
<p>To take steps towards this goal, I am embarking on a journey to learn about deep learning, one of the most promising fields within AI. This blog will serve as a record of my progress, where I’ll document my practice and share related ideas, lessons, and questions that arise along the way.</p>
<section id="fast.ai" class="level2">
<h2 class="anchored" data-anchor-id="fast.ai"><a href="https://www.fast.ai/">fast.ai</a></h2>
<p>Fastai is a vibrant community of deep learning enthusiasts, dedicated to making AI accessible to all. I’m currently going through their ‘Practical Deep Learning for Coders’ course, which has been fantastic thus far!</p>
<p>I’d highly recommend this course to anyone with even a hint of programming experience who’s curious about AI. This is particularly true if you’re in an industry where AI development is still in its infancy - there could be a significant opportunity waiting.</p>
<section id="surprising-discoveries-so-far" class="level3">
<h3 class="anchored" data-anchor-id="surprising-discoveries-so-far">Surprising Discoveries (so far)</h3>
<p>I was astounded by the speed at which I could train and deploy my first model - all within a few weeks of learning.</p>
<p><strong>Transfer learning</strong> is a technique that involves taking a pre-trained model with expert-determined weights and fine-tuning it with your specific data.</p>
<p>This strategy allows you to quickly implement a functioning model, without the need to start from scratch each time. As an example, I trained a simple greenhouse/hydroponic plant health classifier using a pre-trained image classifier model based on the ResNet18 architecture. This was a problem a previous company I worked at was trying to solve, so I thought it would be a fun challenge to undertake myself.</p>
<p>My trained model is now deployed on this <a href="https://huggingface.co/spaces/evylz/plant-doc">🤗 Hugging Face space</a>.</p>
<p>Here’s a fun fact 🤓: A GPU isn’t necessarily required for a deployed model.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://evanlesmez.com/posts/00-first-steps-fastai/plant-doc-hface.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot of the plant-doc 🤗 space</figcaption>
</figure>
</div>
<p>Below are some snippets from the training of the model, conducted <a href="https://colab.research.google.com/drive/1k_02v2nxo4Y9ZaKIOm2FeJfvK6AQaLM5?usp=sharing">in a Google Colab notebook</a>.</p>
<div id="71b5851f-093f-437e-9165-7c07aef06d6a" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.widgets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... create a labeled image datablock and visualize</span></span>
<span id="cb5-5"></span>
<span id="cb5-6">hydro_dblock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb5-7">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock),</span>
<span id="cb5-8">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files,</span>
<span id="cb5-9">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb5-10">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb5-11">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>),</span>
<span id="cb5-12">)</span>
<span id="cb5-13">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hydro_dblock.dataloaders(path)</span>
<span id="cb5-14">dls.valid.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://evanlesmez.com/posts/00-first-steps-fastai/hydro-dblock.png" class="img-fluid figure-img"></p>
<figcaption>Labeled datablock</figcaption>
</figure>
</div>
<div id="4dc8a9a9-5352-4bbe-8b9f-c327e0e22bd0" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... use a pretrained learner and fine tune</span></span>
<span id="cb6-2">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb6-3">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://evanlesmez.com/posts/00-first-steps-fastai/epoch-table-plant-doc.png" class="img-fluid figure-img"></p>
<figcaption>Epoch table</figcaption>
</figure>
</div>
</section>
<section id="overcoming-initial-fears-in-deep-learning" class="level3">
<h3 class="anchored" data-anchor-id="overcoming-initial-fears-in-deep-learning">Overcoming Initial Fears in Deep Learning</h3>
<p>Before diving into the world of deep learning, I was somewhat daunted by the complexity I feared training and deploying a model would entail. I’m neither a math whiz nor a master coder, but I found many of the initial concepts far more intuitive than I’d anticipated.</p>
<p>For instance, the practice of maintaining a <strong>separate training set of data from a validation set</strong> (and a test set) seemed quite logical. The training set provides the model with a foundational understanding of correct answers, like labeled images. The validation set then serves as a quiz for your model, checking its comprehension of the patterns it has learned. In the context of an image classifier, the model must guess which label best matches a given image from the validation set, and then evaluate the confidence level of its correctness or error. This process facilitates the model’s improvement with each “epoch” or training cycle. Additionally, a completely separate test set, kept hidden from the model, can be used by humans to assess the model’s performance after training is completed.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://assets-global.website-files.com/5d7b77b063a9066d83e1209c/61568656a13218cdde7f6166_training-data-validation-test.png" class="img-fluid figure-img"></p>
<figcaption>Simplified model training through test diagram</figcaption>
</figure>
</div>
<p>Separating a robust validation set (and test set) helps to prevent overfitting the model to images present only in the training set. Overfitting can render models unreliable for new images encountered outside the “lab” setting.</p>
<p>For instance, if you’re building a cat breed classifier and include numerous images of the same orange cat perched on its cat tower in both the training and validation sets, the model might overfit for that particular scenario.</p>
<p>Another concept I found intuitive and valuable is the confusion matrix. The confusion matrix helps us visualize which labels the model was “confused” by and predicted incorrectly during training. For example, as shown below, the model predicted that a few plants were healthy when they were actually wilted, and vice versa.</p>
<div id="e6579c17-5526-4f59-9e9a-f05af6d7f94e" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClassificationInterpretation.from_learner(learn)</span>
<span id="cb7-2">interp.plot_confusion_matrix()</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://evanlesmez.com/posts/00-first-steps-fastai/confusion_matrix.png" class="img-fluid figure-img"></p>
<figcaption>Confusion matrix</figcaption>
</figure>
</div>
<p>We can also plot the top mistakes to visualize the images where the model made incorrect predictions and evaluate the model’s confidence in its decisions. Being confidently wrong is problematic, but so is being correct with low confidence. Both scenarios suggest areas where the model can improve.</p>
<p>In the first case, the model may have ‘learned’ incorrect patterns from the training data, leading to high confidence in wrong predictions. In the second case, the model’s lack of confidence, even when correct, could suggest that it’s struggling to find clear patterns in the data. These are valuable insights that can guide us in improving the model’s performance.</p>
<div id="932e3889-71b8-4a62-8794-b9f512047f74" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">interp.plot_top_losses(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://evanlesmez.com/posts/00-first-steps-fastai/top_losses_plot.png" class="img-fluid figure-img"></p>
<figcaption>Plot of top losses</figcaption>
</figure>
</div>
</section>
<section id="opportunities-for-deep-learning-in-the-animal-and-vegan-advocacy-movement" class="level3">
<h3 class="anchored" data-anchor-id="opportunities-for-deep-learning-in-the-animal-and-vegan-advocacy-movement">Opportunities for Deep Learning in the Animal and Vegan Advocacy Movement</h3>
<p>The Animal and Vegan Advocacy (AVA) movement has a multitude of opportunities to leverage deep learning. Just to name a few:</p>
<ul>
<li>Monitoring wildlife habitats</li>
<li>Identifying illegal deforestation</li>
<li>Flagging illegal fishing vessels</li>
<li>Building vegan education chatbots</li>
<li>Enforcing farmed animal welfare standards</li>
</ul>
<p>Some of these areas are already seeing progress. For example, check out this <a href="https://www2.deloitte.com/nl/nl/pages/consumer/solutions/ai4animals.html">AI4Animals animal welfare issue camera monitoring system developed in the Netherlands</a>.</p>
<p>One of the most intriguing projects I’ve come across in this field is the <a href="https://www.earthspecies.org/">Earth Species Project</a>. Their goal is to decode non-human communication using Natural Language Processing. The potential to understand the ‘secret languages’ animals use could undoubtedly foster more compassion.</p>
</section>
<section id="obstacles-faced-by-the-movement" class="level3">
<h3 class="anchored" data-anchor-id="obstacles-faced-by-the-movement">Obstacles Faced by the Movement</h3>
<p>Non-profit organizations, particularly those advocating for animal rights, often face resource constraints that aren’t an issue for for-profit industries. Even within the landscape of animal non-profits, farmed animal activism <a href="https://animalcharityevaluators.org/donation-advice/why-farmed-animals/">receives only a fraction of the donations that shelters do</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://animalcharityevaluators.org/wp-content/uploads/2013/12/donation-allocation-chart-fullsize-409x264@2x.jpg" class="img-fluid figure-img"></p>
<figcaption>Chart of animals impacted and donations received for animal charities</figcaption>
</figure>
</div>
<p>Moreover, non-profits frequently lag behind in technology adoption, making it challenging not only to attract talent like Machine Learning engineers, but also to pursue deep learning-enabled projects that have the potential to make a significant impact.</p>
<p>Large animal agriculture enterprises, armed with extensive resources, are using AI to enhance their efficiency, often without considering animal welfare or ecosystem health. Historically, technology has been used to exploit our environment, damaging natural habitats and harming wildlife. If left unchecked, AI could further this trend.</p>
<p>We need to empower compassionate individuals and policymakers to better understand AI. This will ensure its use strikes a healthier balance between technological advancement and nature, rather than exacerbating existing problems.</p>
<p>Thank you for reading, and stay tuned for more posts in the future!</p>
<p>This blog was built with <a href="https://quarto.org/">Quarto</a> and <a href="https://jupyter.org/">Jupyter</a>, allowing me to embed fun, interactive code generated blocks like the one below.<br>
Try hovering over it.</p>
<div id="dc8c4003-154c-4318-8e79-92889848eadc" class="cell" data-tags="[]" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.graph_objects <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> go</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.offline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pyo</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set notebook mode to work in offline</span></span>
<span id="cb9-5">pyo.init_notebook_mode()</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Helix equation</span></span>
<span id="cb9-10">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb9-11">x, y, z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.cos(t), np.sin(t), t</span>
<span id="cb9-12"></span>
<span id="cb9-13">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> go.Figure(</span>
<span id="cb9-14">    data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-15">        go.Scatter3d(</span>
<span id="cb9-16">            x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x,</span>
<span id="cb9-17">            y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y,</span>
<span id="cb9-18">            z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>z,</span>
<span id="cb9-19">            mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"markers"</span>,</span>
<span id="cb9-20">            marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>z, colorscale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spectral"</span>, opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>),</span>
<span id="cb9-21">        )</span>
<span id="cb9-22">    ]</span>
<span id="cb9-23">)</span>
<span id="cb9-24"></span>
<span id="cb9-25">fig.update_layout(margin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>)</span>
<span id="cb9-26">fig.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>                            <div id="126427df-2bdd-486d-b1ec-b64c8445beb6" class="plotly-graph-div" style="height:640px; width:640px;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("126427df-2bdd-486d-b1ec-b64c8445beb6")) {                    Plotly.newPlot(                        "126427df-2bdd-486d-b1ec-b64c8445beb6",                        [{"marker":{"color":[0.0,0.20202020202020202,0.40404040404040403,0.6060606060606061,0.8080808080808081,1.0101010101010102,1.2121212121212122,1.4141414141414141,1.6161616161616161,1.8181818181818181,2.0202020202020203,2.2222222222222223,2.4242424242424243,2.6262626262626263,2.8282828282828283,3.0303030303030303,3.2323232323232323,3.4343434343434343,3.6363636363636362,3.8383838383838382,4.040404040404041,4.242424242424242,4.444444444444445,4.646464646464646,4.848484848484849,5.05050505050505,5.252525252525253,5.454545454545454,5.656565656565657,5.858585858585858,6.0606060606060606,6.262626262626262,6.4646464646464645,6.666666666666667,6.8686868686868685,7.070707070707071,7.2727272727272725,7.474747474747475,7.6767676767676765,7.878787878787879,8.080808080808081,8.282828282828282,8.484848484848484,8.686868686868687,8.88888888888889,9.09090909090909,9.292929292929292,9.494949494949495,9.696969696969697,9.8989898989899,10.1010101010101,10.303030303030303,10.505050505050505,10.707070707070708,10.909090909090908,11.11111111111111,11.313131313131313,11.515151515151516,11.717171717171716,11.919191919191919,12.121212121212121,12.323232323232324,12.525252525252524,12.727272727272727,12.929292929292929,13.131313131313131,13.333333333333334,13.535353535353535,13.737373737373737,13.93939393939394,14.141414141414142,14.343434343434343,14.545454545454545,14.747474747474747,14.94949494949495,15.15151515151515,15.353535353535353,15.555555555555555,15.757575757575758,15.959595959595958,16.161616161616163,16.363636363636363,16.565656565656564,16.767676767676768,16.96969696969697,17.171717171717173,17.373737373737374,17.575757575757574,17.77777777777778,17.97979797979798,18.18181818181818,18.383838383838384,18.585858585858585,18.78787878787879,18.98989898989899,19.19191919191919,19.393939393939394,19.595959595959595,19.7979797979798,20.0],"colorscale":[[0.0,"rgb(158,1,66)"],[0.1,"rgb(213,62,79)"],[0.2,"rgb(244,109,67)"],[0.3,"rgb(253,174,97)"],[0.4,"rgb(254,224,139)"],[0.5,"rgb(255,255,191)"],[0.6,"rgb(230,245,152)"],[0.7,"rgb(171,221,164)"],[0.8,"rgb(102,194,165)"],[0.9,"rgb(50,136,189)"],[1.0,"rgb(94,79,162)"]],"opacity":0.8,"size":12},"mode":"markers","x":[1.0,0.9796632259996998,0.9194800727522776,0.82189840263017,0.6908872083770674,0.5317751800910392,0.3510339684920502,0.15601495992575853,-0.04534973060188524,-0.24486988668507892,-0.43443031567828566,-0.6063209223738354,-0.7535503059294446,-0.8701301249459654,-0.9513186645587279,-0.993813698804694,-0.9958868038686729,-0.9574536592123347,-0.8800774771896732,-0.7669054216542901,-0.6225406016393301,-0.45285484658127084,-0.2647498781834829,-0.06587659290724678,0.13567612713271912,0.33171041770321597,0.5142528686769626,0.6758788309121296,0.810014403075603,0.9112038155344026,0.9753313358637337,0.9997886702873213,0.983581052239521,0.9273677030509753,0.8334350190781794,0.7056035758515253,0.5490727317130796,0.3702091514654802,0.17628785152548898,-0.02480370080544784,-0.22488639862108173,-0.41582216870771727,-0.5898449758557073,-0.7398766950653171,-0.859815004003662,-0.9447815861050266,-0.9913205490138658,-0.9975389879884077,-0.9631839770525324,-0.8896528563926016,-0.779936397574316,-0.638497158251875,-0.4710879741150293,-0.2845179706505102,-0.08637561184970585,0.11527994954575044,0.3122466663798508,0.4965132034409228,0.6605847868889071,0.7977880432989004,0.9025424294354707,0.9705872127458185,0.9991547704697801,0.9870831586770104,0.9348633726492067,0.8446193763599521,0.7200217133240836,0.5661382125698547,0.38922786205169047,0.19648623340319554,-0.004247187491081489,-0.20480786020107072,-0.3970382705782732,-0.5731197257990347,-0.7258903683424182,-0.8491364741458517,-0.9378451868090543,-0.9884084082494465,-0.9987695528527076,-0.9685071961064762,-0.8988522154304799,-0.7926377260247273,-0.6541838480224215,-0.48912199187635547,-0.30416580891556017,-0.106838123325693,0.09483504780155239,0.29265094105990214,0.47856368221963436,0.645011540479259,0.7852244908862596,0.8934995752719529,0.9654328617943044,0.9980985684711091,0.9901680651138731,0.9419639134315667,0.8554467473014667,0.7341355268330447,0.5829644097750302,0.40808206181339196],"y":[0.0,0.2006488565226854,0.3931366121483298,0.5696341069089657,0.7229625614794605,0.8468855636029834,0.9363627251042848,0.9877546923600838,0.9989711717233568,0.9695559491823237,0.9007054462029555,0.7952200570230491,0.6573902466827755,0.4928220425889235,0.30820901749007684,0.11106003812412972,-0.09060614703340773,-0.28858705872043244,-0.47483011082223947,-0.6417601376193878,-0.7825875026542022,-0.8915842573351402,-0.9643171169287782,-0.9978277779792126,-0.9907532430056771,-0.9433812584459996,-0.8576386109880517,-0.7370127583189133,-0.586409981847235,-0.4119558308308628,-0.22074597455506334,-0.020557596287260064,0.18046693235991093,0.37415123057121996,0.5526174707464059,0.7086067976992182,0.8357745720522589,0.9289484292312513,0.9843386578838236,0.9996923408861117,0.9743849894755358,0.9094459434244625,0.8075165041395626,0.6727425035622647,0.510605678474283,0.32770070881349983,0.13146698864295842,-0.07011396040064677,-0.26884312591038406,-0.45663748763377376,-0.6258587825850161,-0.769624180301191,-0.8820862319774624,-0.9586707069567294,-0.9962626429198221,-0.9933330424549106,-0.9500010628071266,-0.8680291693306353,-0.7507514497694541,-0.6029380050795535,-0.43060093249866344,-0.2407497922206855,-0.04110650371268662,0.1602087321472088,0.3550077104499993,0.5353672656012185,0.6939515345770562,0.8243103325011825,0.9211415045489321,0.9805065833960652,0.9999909806585335,0.9788021967690197,0.9178020547461276,0.8194716467944692,0.6878104194817846,0.5281735020569958,0.3470538943436452,0.15181837339991294,-0.04959213944167377,-0.24898556401922536,-0.43825186230718777,-0.609692902437243,-0.7563355690343919,-0.8722153845598611,-0.9526191057745708,-0.9942764280642703,-0.9954930003312314,-0.9562193402649591,-0.8780528469633162,-0.7641728290436485,-0.6192111908811196,-0.4490640366237758,-0.26065185471747443,-0.06163803708687286,0.13988281820384094,0.3357141429738816,0.5178907824351968,0.6790029662980626,0.8124976904186563,0.9129452507276277],"z":[0.0,0.20202020202020202,0.40404040404040403,0.6060606060606061,0.8080808080808081,1.0101010101010102,1.2121212121212122,1.4141414141414141,1.6161616161616161,1.8181818181818181,2.0202020202020203,2.2222222222222223,2.4242424242424243,2.6262626262626263,2.8282828282828283,3.0303030303030303,3.2323232323232323,3.4343434343434343,3.6363636363636362,3.8383838383838382,4.040404040404041,4.242424242424242,4.444444444444445,4.646464646464646,4.848484848484849,5.05050505050505,5.252525252525253,5.454545454545454,5.656565656565657,5.858585858585858,6.0606060606060606,6.262626262626262,6.4646464646464645,6.666666666666667,6.8686868686868685,7.070707070707071,7.2727272727272725,7.474747474747475,7.6767676767676765,7.878787878787879,8.080808080808081,8.282828282828282,8.484848484848484,8.686868686868687,8.88888888888889,9.09090909090909,9.292929292929292,9.494949494949495,9.696969696969697,9.8989898989899,10.1010101010101,10.303030303030303,10.505050505050505,10.707070707070708,10.909090909090908,11.11111111111111,11.313131313131313,11.515151515151516,11.717171717171716,11.919191919191919,12.121212121212121,12.323232323232324,12.525252525252524,12.727272727272727,12.929292929292929,13.131313131313131,13.333333333333334,13.535353535353535,13.737373737373737,13.93939393939394,14.141414141414142,14.343434343434343,14.545454545454545,14.747474747474747,14.94949494949495,15.15151515151515,15.353535353535353,15.555555555555555,15.757575757575758,15.959595959595958,16.161616161616163,16.363636363636363,16.565656565656564,16.767676767676768,16.96969696969697,17.171717171717173,17.373737373737374,17.575757575757574,17.77777777777778,17.97979797979798,18.18181818181818,18.383838383838384,18.585858585858585,18.78787878787879,18.98989898989899,19.19191919191919,19.393939393939394,19.595959595959595,19.7979797979798,20.0],"type":"scatter3d"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}},"margin":{"l":0,"r":0,"b":0,"t":0},"width":640,"height":640},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('126427df-2bdd-486d-b1ec-b64c8445beb6');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>blog</category>
  <category>fastai</category>
  <category>deeplearning</category>
  <guid>https://evanlesmez.com/posts/00-first-steps-fastai/</guid>
  <pubDate>Fri, 12 May 2023 04:00:00 GMT</pubDate>
  <media:content url="https://evanlesmez.com/posts/00-first-steps-fastai/DALL·E-digital_art_cute_solarpunk_forest_guardian_robot.png" medium="image" type="image/png" height="144" width="144"/>
</item>
</channel>
</rss>
